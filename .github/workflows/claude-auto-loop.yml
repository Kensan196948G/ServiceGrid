name: Claude Complete Auto Development

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      instructions:
        description: 'Claudeへの日本語指示'
        required: false
        default: '包括的なシステム診断と自動改善を実行してください'
      mode:
        description: '実行モード'
        required: true
        default: 'full-auto'
        type: choice
        options:
          - full-auto
          - safe-mode
          - aggressive
  schedule:
    - cron: '0 */6 * * *'  # 6時間ごとに実行（修正: 余分な*を削除）

env:
  CLAUDE_MAX_ITERATIONS: "5"
  TZ: 'Asia/Tokyo'

jobs:
  claude-complete-automation:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude'))
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
      - name: 🚀 Repository Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🔧 Environment Setup
        run: |
          echo "Claude公式CLI環境セットアップ中..."
          sudo apt-get update && sudo apt-get install -y jq curl git bc
          
          # Node.js セットアップ
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Claude Code CLI インストール
          npm install -g @anthropic-ai/claude-code
          
          # インストール確認
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          
          # Claude Code の確認
          if command -v claude-code &> /dev/null; then
            echo "✅ Claude Code CLI インストール成功"
            claude-code --version || echo "バージョン確認中..."
          else
            echo "❌ Claude Code CLI インストール失敗"
            exit 1
          fi
          
      - name: 📝 Find Latest Spec File
        id: specfile
        run: |
          echo "🔍 仕様書ファイルを検索中..."
          
          # 優先順位付きでファイル検索
          SPEC_FILE=""
          
          # 1. 最新版付きファイル
          if [ -z "$SPEC_FILE" ]; then
            SPEC_FILE=$(find . -name "*最新版*.txt" -type f | head -n 1)
          fi
          
          # 2. ITSM関連ファイル
          if [ -z "$SPEC_FILE" ]; then
            SPEC_FILE=$(find . -name "*ITSM*仕様書*.txt" -type f | head -n 1)
          fi
          
          # 3. 一般的な仕様書ファイル
          if [ -z "$SPEC_FILE" ]; then
            SPEC_FILE=$(find . -name "*仕様書*.txt" -type f | head -n 1)
          fi
          
          # 4. デフォルトファイル作成
          if [ -z "$SPEC_FILE" ]; then
            SPEC_FILE="default_spec.txt"
            echo "ITSM準拠IT運用システムプラットフォーム開発仕様書" > "$SPEC_FILE"
            echo "包括的なIT運用システムの設計・開発・実装を行ってください。" >> "$SPEC_FILE"
            echo "⚠️ デフォルト仕様書を作成しました: $SPEC_FILE"
          fi
          
          echo "SPEC_FILE=$SPEC_FILE" >> $GITHUB_ENV
          echo "✅ 使用する仕様書ファイル: $SPEC_FILE"
          echo "📄 ファイルサイズ: $(wc -c < "$SPEC_FILE") bytes"
          
      - name: 🗝️ Parse Input Parameters
        id: parse_params
        run: |
          echo "🔧 実行パラメータを設定中..."
          
          # デフォルト値設定
          MODE="full-auto"
          INSTRUCTIONS="包括的なシステム診断と自動改善を実行してください"
          
          # workflow_dispatch からの入力値
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.mode }}" ]; then
              MODE="${{ github.event.inputs.mode }}"
            fi
            if [ -n "${{ github.event.inputs.instructions }}" ]; then
              INSTRUCTIONS="${{ github.event.inputs.instructions }}"
            fi
          fi
          
          # issue_comment からの解析
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            COMMENT="${{ github.event.comment.body }}"
            
            # モード解析
            if echo "$COMMENT" | grep -q -- '--mode'; then
              EXTRACTED_MODE=$(echo "$COMMENT" | sed -n 's/.*--mode[ =]\([^ ]*\).*/\1/p')
              if [ -n "$EXTRACTED_MODE" ]; then
                MODE="$EXTRACTED_MODE"
              fi
            fi
            
            # 指示解析
            if echo "$COMMENT" | grep -q -- '--instructions'; then
              EXTRACTED_INSTRUCTIONS=$(echo "$COMMENT" | sed -n 's/.*--instructions[ =]"\([^"]*\)".*/\1/p')
              if [ -n "$EXTRACTED_INSTRUCTIONS" ]; then
                INSTRUCTIONS="$EXTRACTED_INSTRUCTIONS"
              fi
            fi
          fi
          
          # 環境変数に設定
          echo "MODE=$MODE" >> $GITHUB_ENV
          echo "INSTRUCTIONS=$INSTRUCTIONS" >> $GITHUB_ENV
          
          echo "📋 実行設定:"
          echo "  - モード: $MODE"
          echo "  - 指示: $INSTRUCTIONS"
          
      - name: 🤖 Claude Auto Loop Execution
        env:
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}  # 両方の名前で設定
        run: |
          echo "🚀 Claude自動開発・修復ループ開始"
          
          # API キー確認
          if [ -z "$ANTHROPIC_API_KEY" ] && [ -z "$CLAUDE_API_KEY" ]; then
            echo "❌ APIキーが設定されていません"
            echo "GitHub Secrets に CLAUDE_API_KEY または ANTHROPIC_API_KEY を設定してください"
            exit 1
          fi
          
          # ファイル存在確認
          if [ ! -f "$SPEC_FILE" ]; then
            echo "❌ 仕様書ファイルが見つかりません: $SPEC_FILE"
            exit 1
          fi
          
          echo "📋 実行環境:"
          echo "  - 仕様書: $SPEC_FILE"
          echo "  - モード: $MODE"
          echo "  - 最大反復: $CLAUDE_MAX_ITERATIONS"
          echo "  - 指示: $INSTRUCTIONS"
          
          # メインループ
          ITER=1
          SUCCESS_COUNT=0
          FAILED_COUNT=0
          
          while [ $ITER -le $CLAUDE_MAX_ITERATIONS ]; do
            echo "======================================"
            echo "🌀 Claude開発ループ $ITER 回目"
            echo "======================================"
            
            # Claude実行（実際のAPIに合わせて調整）
            if command -v claude-code &> /dev/null; then
              # 公式CLIを使用
              claude-code \
                --file "$SPEC_FILE" \
                --message "$INSTRUCTIONS (モード: $MODE, 第${ITER}回目の実行)" \
                --auto-approve 2>&1 || {
                  echo "⚠️ claude-codeコマンドでエラーが発生しました"
                  STATUS=1
                }
              STATUS=$?
            else
              # APIダイレクト呼び出し（フォールバック）
              echo "🔄 API直接呼び出しモードで実行中..."
              
              # 仕様書内容読み込み
              SPEC_CONTENT=$(head -c 4000 "$SPEC_FILE")
              
              RESPONSE=$(curl -s -w "%{http_code}" -X POST https://api.anthropic.com/v1/messages \
                -H "Content-Type: application/json" \
                -H "x-api-key: ${ANTHROPIC_API_KEY:-$CLAUDE_API_KEY}" \
                -H "anthropic-version: 2023-06-01" \
                -d '{
                  "model": "claude-3-sonnet-20240229",
                  "max_tokens": 4000,
                  "messages": [
                    {
                      "role": "user", 
                      "content": "'"${INSTRUCTIONS} (モード: ${MODE}, 第${ITER}回目)\n\n仕様書:\n${SPEC_CONTENT}"'"
                    }
                  ]
                }')
              
              HTTP_CODE="${RESPONSE: -3}"
              if [ "$HTTP_CODE" = "200" ]; then
                STATUS=0
                echo "✅ API呼び出し成功"
              else
                STATUS=1
                echo "❌ API呼び出し失敗 (HTTP $HTTP_CODE)"
              fi
            fi
            
            # 結果処理
            if [ $STATUS -eq 0 ]; then
              echo "✅ Claude開発ループ $ITER 完了"
              SUCCESS_COUNT=$((SUCCESS_COUNT+1))
            else
              echo "⚠️ Claudeエラー: ループ $ITER 失敗（終了コード: $STATUS）"
              FAILED_COUNT=$((FAILED_COUNT+1))
              
              # 連続失敗チェック
              if [ $FAILED_COUNT -ge 3 ]; then
                echo "❌ 連続3回失敗のため、安全のためループを停止します"
                break
              fi
            fi
            
            echo "📊 現在の状況: 成功 $SUCCESS_COUNT 回, 失敗 $FAILED_COUNT 回"
            ITER=$((ITER+1))
            
            # レート制限対策
            if [ $ITER -le $CLAUDE_MAX_ITERATIONS ]; then
              echo "⏳ レート制限対策で10秒待機..."
              sleep 10
            fi
          done
          
          echo "======================================"
          echo "🎉 Claude自動開発ループ完了"
          echo "📈 最終結果: 成功 $SUCCESS_COUNT 回, 失敗 $FAILED_COUNT 回"
          echo "======================================"
          
      - name: 📊 Report Results
        if: always()
        run: |
          echo "======================================"
          echo "📊 実行結果レポート"
          echo "======================================"
          echo "実行完了時刻: $(date '+%Y-%m-%d %H:%M:%S JST')"
          echo "実行者: ${{ github.actor }}"
          echo "イベント: ${{ github.event_name }}"
          echo "リポジトリ: ${{ github.repository }}"
          echo "ブランチ: ${{ github.ref_name }}"
          
          # 生成されたファイルの確認
          echo "📁 新規作成・更新されたファイル:"
          find . -newer "$SPEC_FILE" -type f 2>/dev/null | head -10 || echo "新規ファイルなし"
          
          echo "GitHub Actions実行ログを確認してください"
          
      - name: 💾 Commit Changes
        if: success()
        run: |
          echo "💾 変更内容をコミット中..."
          
          git config --local user.email "kensan1969@gmail.com"
          git config --local user.name "Kensan196948G"
          
          # 変更があるかチェック
          if git diff --quiet && git diff --staged --quiet; then
            echo "📝 コミットする変更がありません"
          else
            git add -A
            
            # コミットメッセージ作成
            COMMIT_MSG="🤖 Claude Auto Development: $(date '+%Y-%m-%d %H:%M:%S JST')"
            if [ "${{ github.event_name }}" = "issue_comment" ]; then
              COMMIT_MSG="$COMMIT_MSG - Issue #${{ github.event.issue.number }} からの実行"
            elif [ "${{ github.event_name }}" = "schedule" ]; then
              COMMIT_MSG="$COMMIT_MSG - スケジュール実行"
            fi
            
            git commit -m "$COMMIT_MSG"
            git push
            echo "✅ コミット完了"
          fi
          
      - name: 📋 Archive Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: claude-development-results-${{ github.run_number }}
          path: |
            **/*.py
            **/*.js
            **/*.md
            **/*.txt
            **/*.yml
            **/*.yaml
            **/*.json
          retention-days: 30
