name: Claude Complete Auto Development

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      instructions:
        description: 'Claude への日本語指示'
        required: false
        default: '包括的なシステム診断と自動改善を実行してください'
      mode:
        description: '実行モード'
        required: true
        default: 'full-auto'
        type: choice
        options:
          - full-auto
          - safe-mode
          - aggressive
  schedule:
    - cron: '0 */6 * * *'

env:
  CLAUDE_AUTO_APPROVE: "true"
  CLAUDE_NO_PROMPTS: "true"
  CLAUDE_SILENT_MODE: "true"
  CLAUDE_LANGUAGE: "ja"
  CLAUDE_MAX_ITERATIONS: "5"
  CLAUDE_TIMEOUT: "3600"
  TZ: 'Asia/Tokyo'

jobs:
  claude-complete-automation:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude'))
    runs-on: ubuntu-latest
    timeout-minutes: 60

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: 🚀 Repository Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Environment Setup
        run: |
          echo "Claude完全自動化環境セットアップ中..."
          sudo apt-get update && sudo apt-get install -y jq curl git bc

      - name: 📝 Find Latest Spec File
        id: specfile
        run: |
          FILE=$(ls -1 *最新版*.txt 2>/dev/null | head -n 1)
          if [ -z "$FILE" ]; then
            FILE=$(ls -1 "ITSM準拠IT運用システムプラットフォーム 詳細仕様書.txt" 2>/dev/null || true)
          fi
          if [ -z "$FILE" ]; then
            echo "⚠️ 仕様書ファイル（.txt）が見つかりません"
            exit 1
          fi
          echo "SPEC_FILE=$FILE" >> $GITHUB_ENV
          echo "使用する仕様書ファイル: $FILE"

      - name: 🗝️ Parse Claude Command Options
        if: github.event_name == 'issue_comment'
        id: parseclaude
        run: |
          # コメント本文を取得
          COMMENT="${{ github.event.comment.body }}"
          # デフォルト値
          CLAUDE_OPTS="--auto-approve --no-prompts --silent-mode --mode full-auto"
          INSTRUCTIONS="包括的なシステム診断と自動改善を実行してください"
          # @claudeコマンド行のみを抽出
          CMD_LINE=$(echo "$COMMENT" | grep '@claude')
          if [ -n "$CMD_LINE" ]; then
            # --mode や --instructions オプションを抽出（必要に応じて拡張）
            if echo "$CMD_LINE" | grep -q -- '--mode'; then
              MODE=$(echo "$CMD_LINE" | sed -n 's/.*--mode[ =]\?\([^ ]*\).*/\1/p')
              [ -n "$MODE" ] && CLAUDE_OPTS=$(echo "$CLAUDE_OPTS" | sed "s/--mode [^ ]*/--mode $MODE/")
            fi
            if echo "$CMD_LINE" | grep -q -- '--instructions'; then
              INSTRUCTIONS=$(echo "$CMD_LINE" | sed -n 's/.*--instructions[ =]\?\([^ ]*\).*/\1/p')
            fi
          fi
          echo "CLAUDE_OPTS=$CLAUDE_OPTS" >> $GITHUB_ENV
          echo "INSTRUCTIONS=$INSTRUCTIONS" >> $GITHUB_ENV
          echo "パース結果: $CLAUDE_OPTS / $INSTRUCTIONS"

      - name: 🤖 Claude Auto Loop Execution
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        run: |
          echo "🚀 Claude自動開発・修復ループ開始"
          ITER=1
          while [ $ITER -le $CLAUDE_MAX_ITERATIONS ]; do
            echo "----------------------"
            echo "🌀 ループ $ITER 回目"
            echo "----------------------"
            # コマンド/オプションを自動適用
            npx claude-cli \
              --file "$SPEC_FILE" \
              $CLAUDE_OPTS \
              --instructions "$INSTRUCTIONS" \
              --lang "ja"
            STATUS=$?
            if [ $STATUS -eq 0 ]; then
              echo "✅ Claude開発ループ $ITER 完了"
            else
              echo "⚠️ Claudeエラー: ループ $ITER 失敗、次に進みます"
            fi
            ITER=$((ITER+1))
          done
          echo "🎉 Claude自動開発ループ完了"

      - name: 📊 Report Results
        if: always()
        run: |
          echo "実行完了時刻: $(date '+%Y-%m-%d %H:%M:%S JST')"
          echo "GitHub Actions実行ログを確認してください"

      - name: 💾 Commit Changes
        if: success()
        run: |
          git config --local user.email "kensan1969@gmail.com"
          git config --local user.name "Kensan196948G"
          git add -A
          git diff --staged --quiet || git commit -m "🤖 Claude Auto Development: $(date '+%Y-%m-%d %H:%M:%S JST')"
          git push
