name: Claude Complete Auto Development (API版)

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      instructions:
        description: 'Claudeへの日本語指示'
        required: false
        default: '包括的なシステム診断と自動改善を実行してください'
      mode:
        description: '実行モード'
        required: true
        default: 'full-auto'
        type: choice
        options:
          - full-auto
          - safe-mode
          - aggressive
  schedule:
    - cron: '0 */6 * * *'

env:
  CLAUDE_MAX_ITERATIONS: "5"
  TZ: 'Asia/Tokyo'

jobs:
  claude-api-automation:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude'))
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
      - name: 🚀 Repository Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🔧 基本環境セットアップ
        run: |
          echo "基本環境セットアップ中..."
          sudo apt-get update && sudo apt-get install -y jq curl git bc
          
          echo "環境確認:"
          echo "  - jq: $(jq --version)"
          echo "  - curl: $(curl --version | head -1)"
          echo "  - git: $(git --version)"
          echo "✅ 基本環境セットアップ完了"
          
      - name: 📝 Find Latest Spec File
        id: specfile
        run: |
          echo "🔍 仕様書ファイルを検索中..."
          
          SPEC_FILE=""
          
          # 優先順位付きでファイル検索
          if [ -z "$SPEC_FILE" ]; then
            SPEC_FILE=$(find . -name "*最新版*.txt" -type f | head -n 1)
          fi
          
          if [ -z "$SPEC_FILE" ]; then
            SPEC_FILE=$(find . -name "*ITSM*仕様書*.txt" -type f | head -n 1)
          fi
          
          if [ -z "$SPEC_FILE" ]; then
            SPEC_FILE=$(find . -name "*仕様書*.txt" -type f | head -n 1)
          fi
          
          # デフォルト仕様書作成
          if [ -z "$SPEC_FILE" ]; then
            SPEC_FILE="itsm_platform_spec.txt"
            cat > "$SPEC_FILE" << 'EOF'
          ITSM準拠IT運用システムプラットフォーム開発仕様書
          
          ## 概要
          企業のIT運用を包括的に管理するITSM（IT Service Management）準拠のプラットフォームを開発する。
          
          ## 主要機能要件
          1. インシデント管理機能
          2. 問題管理機能
          3. 変更管理機能
          4. リリース管理機能
          5. 構成管理機能
          6. サービスレベル管理機能
          7. ダッシュボード機能
          8. レポート機能
          
          ## 技術要件
          - 高可用性（99.9%以上）
          - スケーラビリティ
          - セキュリティ準拠
          - API連携機能
          - 自動化機能
          
          ## 品質要件
          - ユーザビリティ
          - 保守性
          - 拡張性
          - パフォーマンス
          EOF
            echo "⚠️ デフォルト仕様書を作成しました: $SPEC_FILE"
          fi
          
          echo "SPEC_FILE=$SPEC_FILE" >> $GITHUB_ENV
          echo "✅ 使用する仕様書ファイル: $SPEC_FILE"
          echo "📄 ファイルサイズ: $(wc -c < "$SPEC_FILE") bytes"
          
      - name: 🗝️ Parse Input Parameters
        id: parse_params
        run: |
          echo "🔧 実行パラメータを設定中..."
          
          MODE="full-auto"
          INSTRUCTIONS="包括的なシステム診断と自動改善を実行してください"
          
          # workflow_dispatch からの入力値
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.mode }}" ]; then
              MODE="${{ github.event.inputs.mode }}"
            fi
            if [ -n "${{ github.event.inputs.instructions }}" ]; then
              INSTRUCTIONS="${{ github.event.inputs.instructions }}"
            fi
          fi
          
          # issue_comment からの解析
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            COMMENT="${{ github.event.comment.body }}"
            
            if echo "$COMMENT" | grep -q -- '--mode'; then
              EXTRACTED_MODE=$(echo "$COMMENT" | sed -n 's/.*--mode[ =]\([^ ]*\).*/\1/p')
              if [ -n "$EXTRACTED_MODE" ]; then
                MODE="$EXTRACTED_MODE"
              fi
            fi
            
            if echo "$COMMENT" | grep -q -- '--instructions'; then
              EXTRACTED_INSTRUCTIONS=$(echo "$COMMENT" | sed -n 's/.*--instructions[ =]"\([^"]*\)".*/\1/p')
              if [ -n "$EXTRACTED_INSTRUCTIONS" ]; then
                INSTRUCTIONS="$EXTRACTED_INSTRUCTIONS"
              fi
            fi
          fi
          
          echo "MODE=$MODE" >> $GITHUB_ENV
          echo "INSTRUCTIONS=$INSTRUCTIONS" >> $GITHUB_ENV
          
          echo "📋 実行設定:"
          echo "  - モード: $MODE"
          echo "  - 指示: $INSTRUCTIONS"
          
      - name: 🤖 Claude API直接実行ループ
        env:
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        run: |
          echo "🚀 Claude API直接実行ループ開始"
          
          # API キー確認
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "❌ ANTHROPIC_API_KEY が設定されていません"
            echo "GitHub Secrets に CLAUDE_API_KEY を設定してください"
            exit 1
          fi
          
          # ファイル存在確認
          if [ ! -f "$SPEC_FILE" ]; then
            echo "❌ 仕様書ファイルが見つかりません: $SPEC_FILE"
            exit 1
          fi
          
          echo "📋 実行環境:"
          echo "  - 仕様書: $SPEC_FILE"
          echo "  - モード: $MODE"
          echo "  - 最大反復: $CLAUDE_MAX_ITERATIONS"
          echo "  - 指示: $INSTRUCTIONS"
          
          # 仕様書内容読み込み（文字数制限対策）
          SPEC_CONTENT=$(head -c 6000 "$SPEC_FILE")
          
          # メインループ
          ITER=1
          SUCCESS_COUNT=0
          FAILED_COUNT=0
          
          while [ $ITER -le $CLAUDE_MAX_ITERATIONS ]; do
            echo "======================================"
            echo "🌀 Claude API実行 $ITER 回目"
            echo "======================================"
            
            # APIリクエストペイロード作成
            PROMPT="【Claude自動開発システム - 実行 ${ITER}/${CLAUDE_MAX_ITERATIONS}】

          🎯 実行指示: ${INSTRUCTIONS}
          🔧 実行モード: ${MODE}
          📅 実行時刻: $(date '+%Y-%m-%d %H:%M:%S JST')
          
          以下の仕様書に基づいて、ITSM準拠のIT運用システムプラットフォームの開発・改善を行ってください。
          
          具体的に以下の作業を実施してください：
          1. 現在の進捗状況の分析
          2. 次に実装すべき機能の特定
          3. コード・設定ファイルの生成
          4. テスト計画の策定
          5. 改善提案の作成
          
          【仕様書内容】
          ${SPEC_CONTENT}
          
          【注意事項】
          - 実用的で動作するコードを生成してください
          - セキュリティベストプラクティスに従ってください
          - 日本語でドキュメントを作成してください
          - 前回までの成果を考慮して継続的な改善を行ってください"
            
            # API呼び出し実行
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST https://api.anthropic.com/v1/messages \
              -H "Content-Type: application/json" \
              -H "x-api-key: $ANTHROPIC_API_KEY" \
              -H "anthropic-version: 2023-06-01" \
              -d "{
                \"model\": \"claude-3-sonnet-20240229\",
                \"max_tokens\": 4000,
                \"messages\": [
                  {
                    \"role\": \"user\", 
                    \"content\": $(echo "$PROMPT" | jq -Rs .)
                  }
                ]
              }")
            
            # レスポンス解析
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
            
            if [ "$HTTP_CODE" = "200" ]; then
              STATUS=0
              SUCCESS_COUNT=$((SUCCESS_COUNT+1))
              echo "✅ Claude API呼び出し成功"
              
              # レスポンス保存・処理
              OUTPUT_DIR="claude_results"
              mkdir -p "$OUTPUT_DIR"
              
              TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
              RESPONSE_FILE="${OUTPUT_DIR}/response_${ITER}_${TIMESTAMP}.json"
              OUTPUT_FILE="${OUTPUT_DIR}/output_${ITER}_${TIMESTAMP}.md"
              
              echo "$RESPONSE_BODY" > "$RESPONSE_FILE"
              
              # 応答内容抽出
              if echo "$RESPONSE_BODY" | jq -e '.content[0].text' > /dev/null 2>&1; then
                CLAUDE_OUTPUT=$(echo "$RESPONSE_BODY" | jq -r '.content[0].text')
                echo "$CLAUDE_OUTPUT" > "$OUTPUT_FILE"
                
                echo "📝 Claude応答概要:"
                echo "$CLAUDE_OUTPUT" | head -10
                echo "..."
                echo "💾 完全な応答を保存: $OUTPUT_FILE"
                
                # 使用量情報
                if echo "$RESPONSE_BODY" | jq -e '.usage' > /dev/null 2>&1; then
                  INPUT_TOKENS=$(echo "$RESPONSE_BODY" | jq -r '.usage.input_tokens // "N/A"')
                  OUTPUT_TOKENS=$(echo "$RESPONSE_BODY" | jq -r '.usage.output_tokens // "N/A"')
                  echo "📊 API使用量: 入力 $INPUT_TOKENS トークン, 出力 $OUTPUT_TOKENS トークン"
                fi
              else
                echo "⚠️ レスポンス形式の解析に失敗"
                echo "$RESPONSE_BODY" > "$OUTPUT_FILE"
              fi
              
            else
              STATUS=1
              FAILED_COUNT=$((FAILED_COUNT+1))
              echo "❌ Claude API呼び出し失敗 (HTTP $HTTP_CODE)"
              echo "エラー詳細:"
              echo "$RESPONSE_BODY" | jq . 2>/dev/null || echo "$RESPONSE_BODY"
              
              # 連続失敗チェック
              if [ $FAILED_COUNT -ge 3 ]; then
                echo "❌ 連続3回失敗のため、安全のためループを停止します"
                break
              fi
            fi
            
            echo "📊 現在の状況: 成功 $SUCCESS_COUNT 回, 失敗 $FAILED_COUNT 回"
            ITER=$((ITER+1))
            
            # レート制限対策
            if [ $ITER -le $CLAUDE_MAX_ITERATIONS ]; then
              echo "⏳ API制限対策で20秒待機..."
              sleep 20
            fi
          done
          
          echo "======================================"
          echo "🎉 Claude API自動実行ループ完了"
          echo "📈 最終結果: 成功 $SUCCESS_COUNT 回, 失敗 $FAILED_COUNT 回"
          echo "======================================"
          
      - name: 📊 実行結果レポート
        if: always()
        run: |
          echo "======================================"
          echo "📊 実行結果レポート"
          echo "======================================"
          echo "実行完了時刻: $(date '+%Y-%m-%d %H:%M:%S JST')"
          echo "実行者: ${{ github.actor }}"
          echo "イベント: ${{ github.event_name }}"
          echo "リポジトリ: ${{ github.repository }}"
          echo "ブランチ: ${{ github.ref_name }}"
          
          # 生成ファイル確認
          if [ -d "claude_results" ]; then
            echo "📁 生成されたファイル:"
            ls -la claude_results/
            echo "📄 ファイル数: $(ls claude_results/ | wc -l)"
          else
            echo "📁 生成ファイルなし"
          fi
          
      - name: 💾 変更内容コミット
        if: success()
        run: |
          echo "💾 変更内容をコミット中..."
          
          git config --local user.email "kensan1969@gmail.com"
          git config --local user.name "Kensan196948G"
          
          # 変更があるかチェック
          if git diff --quiet && git diff --staged --quiet; then
            echo "📝 新しい変更がありません"
          else
            git add -A
            
            COMMIT_MSG="🤖 Claude Auto Development (API): $(date '+%Y-%m-%d %H:%M:%S JST')"
            if [ "${{ github.event_name }}" = "issue_comment" ]; then
              COMMIT_MSG="$COMMIT_MSG - Issue #${{ github.event.issue.number }} 経由"
            elif [ "${{ github.event_name }}" = "schedule" ]; then
              COMMIT_MSG="$COMMIT_MSG - 定期実行"
            fi
            
            git commit -m "$COMMIT_MSG"
            git push
            echo "✅ コミット・プッシュ完了"
          fi
          
      - name: 📋 結果アーカイブ
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: claude-api-results-${{ github.run_number }}
          path: |
            claude_results/
            **/*.py
            **/*.js
            **/*.md
            **/*.txt
            **/*.yml
            **/*.yaml
            **/*.json
          retention-days: 30
