#!/bin/bash

# ==================================================================
# WebUI‰øÆÂæ©ÂØæË±°Ë©≥Á¥∞ÂàÜÊûê„Ç∑„Çπ„ÉÜ„É† v1.0
# „Éï„Ç°„Ç§„É´„Éª„Ç®„É©„Éº„ÉªÂìÅË≥™ÂïèÈ°å„ÅÆË©≥Á¥∞ÂàÜÊûê„ÉªÂàÜÈ°û„ÉªÂÑ™ÂÖàÂ∫¶‰ªò„Åë
# ==================================================================

set -euo pipefail

# =========================
# Ë®≠ÂÆö„ÉªÂÆöÊï∞ÂÆöÁæ©
# =========================

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
readonly SRC_DIR="$PROJECT_ROOT/src"
readonly ANALYSIS_DIR="$PROJECT_ROOT/analysis"
readonly REPORT_DIR="$PROJECT_ROOT/reports/repair-analysis"

# ÂàÜÊûêË®≠ÂÆö
readonly TIMESTAMP="$(date '+%Y%m%d_%H%M%S')"
readonly ANALYSIS_REPORT="$REPORT_DIR/analysis-${TIMESTAMP}.json"
readonly DETAILED_REPORT="$REPORT_DIR/detailed-${TIMESTAMP}.md"

# Ëâ≤Ë®≠ÂÆö
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'
readonly NC='\033[0m' # No Color

# ÈáçË¶ÅÂ∫¶Ë®≠ÂÆö
readonly PRIORITY_CRITICAL=1
readonly PRIORITY_HIGH=2
readonly PRIORITY_MEDIUM=3
readonly PRIORITY_LOW=4

# =========================
# ÂàùÊúüÂåñ
# =========================

init_analysis() {
    echo -e "${BOLD}${BLUE}üîç WebUI‰øÆÂæ©ÂØæË±°Ë©≥Á¥∞ÂàÜÊûê„Ç∑„Çπ„ÉÜ„É† v1.0${NC}"
    echo -e "${CYAN}üìÖ ÂàÜÊûêÈñãÂßãÊôÇÂàª: $(date '+%Y-%m-%d %H:%M:%S')${NC}"
    echo ""
    
    # „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
    mkdir -p "$ANALYSIS_DIR" "$REPORT_DIR"
    
    # „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„ÉàÁ¢∫Ë™ç
    if [[ ! -d "$SRC_DIR" ]]; then
        echo -e "${RED}‚ùå „ÇΩ„Éº„Çπ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $SRC_DIR${NC}"
        exit 1
    fi
    
    cd "$PROJECT_ROOT"
    echo -e "${GREEN}‚úÖ ÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü${NC}"
    echo -e "${BLUE}üìÅ ÂØæË±°„Éá„Ç£„É¨„ÇØ„Éà„É™: $SRC_DIR${NC}"
    echo ""
}

# =========================
# „Éï„Ç°„Ç§„É´ÊßãÈÄ†ÂàÜÊûê
# =========================

analyze_file_structure() {
    echo -e "${BOLD}${PURPLE}üìÇ „Éï„Ç°„Ç§„É´ÊßãÈÄ†ÂàÜÊûêÈñãÂßã${NC}"
    
    local structure_file="$ANALYSIS_DIR/file-structure.json"
    
    # TypeScript/JSX„Éï„Ç°„Ç§„É´ÂèéÈõÜ
    local all_files=($(find "$SRC_DIR" -name "*.ts" -o -name "*.tsx" | sort))
    local component_files=($(find "$SRC_DIR/components" -name "*.tsx" 2>/dev/null | sort))
    local service_files=($(find "$SRC_DIR/services" -name "*.ts" 2>/dev/null | sort))
    local type_files=($(find "$SRC_DIR/types" -name "*.ts" 2>/dev/null | sort))
    local hook_files=($(find "$SRC_DIR/hooks" -name "*.ts" 2>/dev/null | sort))
    local util_files=($(find "$SRC_DIR/utils" -name "*.ts" 2>/dev/null | sort))
    local page_files=($(find "$SRC_DIR/pages" -name "*.tsx" 2>/dev/null | sort))
    local test_files=($(find "$SRC_DIR" -name "*.test.*" 2>/dev/null | sort))
    
    # „Éï„Ç°„Ç§„É´Ë©≥Á¥∞ÂàÜÊûê
    local file_details=()
    
    for file in "${all_files[@]}"; do
        if [[ -f "$file" ]]; then
            local rel_path="${file#$PROJECT_ROOT/}"
            local lines=$(wc -l < "$file" 2>/dev/null || echo "0")
            local size=$(wc -c < "$file" 2>/dev/null || echo "0")
            local last_modified=$(stat -c %Y "$file" 2>/dev/null || echo "0")
            
            # „Éï„Ç°„Ç§„É´„Çø„Ç§„ÉóÂà§ÂÆö
            local file_type="other"
            case "$file" in
                *components/*.tsx) file_type="component" ;;
                *services/*.ts) file_type="service" ;;
                *types/*.ts) file_type="type" ;;
                *hooks/*.ts) file_type="hook" ;;
                *utils/*.ts) file_type="utility" ;;
                *pages/*.tsx) file_type="page" ;;
                *.test.*) file_type="test" ;;
            esac
            
            # Ë§áÈõëÂ∫¶ÂàÜÊûêÔºàÁ∞°ÊòìÁâàÔºâ
            local complexity="low"
            if [[ $lines -gt 200 ]]; then
                complexity="high"
            elif [[ $lines -gt 100 ]]; then
                complexity="medium"
            fi
            
            file_details+=("{\"path\":\"$rel_path\",\"type\":\"$file_type\",\"lines\":$lines,\"size\":$size,\"complexity\":\"$complexity\",\"last_modified\":$last_modified}")
        fi
    done
    
    # JSONÂΩ¢Âºè„Åß‰øùÂ≠ò
    cat > "$structure_file" << EOF
{
  "analysis_timestamp": "$(date -Iseconds)",
  "summary": {
    "total_files": ${#all_files[@]},
    "component_files": ${#component_files[@]},
    "service_files": ${#service_files[@]},
    "type_files": ${#type_files[@]},
    "hook_files": ${#hook_files[@]},
    "util_files": ${#util_files[@]},
    "page_files": ${#page_files[@]},
    "test_files": ${#test_files[@]}
  },
  "files": [
    $(IFS=','; echo "${file_details[*]}")
  ]
}
EOF
    
    echo -e "${GREEN}‚úÖ „Éï„Ç°„Ç§„É´ÊßãÈÄ†ÂàÜÊûêÂÆå‰∫Ü${NC}"
    echo -e "${BLUE}üìä Á∑è„Éï„Ç°„Ç§„É´Êï∞: ${#all_files[@]}${NC}"
    echo -e "${BLUE}üì± „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà: ${#component_files[@]}${NC}"
    echo -e "${BLUE}üîß „Çµ„Éº„Éì„Çπ: ${#service_files[@]}${NC}"
    echo -e "${BLUE}üìù ÂûãÂÆöÁæ©: ${#type_files[@]}${NC}"
    echo ""
}

# =========================
# ÂìÅË≥™ÂïèÈ°åÂàÜÊûê
# =========================

analyze_quality_issues() {
    echo -e "${BOLD}${RED}üö® ÂìÅË≥™ÂïèÈ°åÂàÜÊûêÈñãÂßã${NC}"
    
    local issues_file="$ANALYSIS_DIR/quality-issues.json"
    local ts_errors=()
    local eslint_issues=()
    
    # TypeScript „Ç®„É©„ÉºÂàÜÊûê
    echo -e "${YELLOW}TypeScript „Ç®„É©„ÉºÂàÜÊûê‰∏≠...${NC}"
    if command -v npm >/dev/null 2>&1; then
        local ts_output
        ts_output=$(npm run typecheck 2>&1 || true)
        
        # TypeScript „Ç®„É©„Éº„Çí„Éë„Éº„Çπ„Åó„Å¶Ë©≥Á¥∞ÊÉÖÂ†±ÊäΩÂá∫
        while IFS= read -r line; do
            if [[ "$line" =~ ^(.+)\(([0-9]+),([0-9]+)\):[[:space:]]*(error)[[:space:]]+(TS[0-9]+):[[:space:]]*(.+)$ ]]; then
                local file="${BASH_REMATCH[1]}"
                local line_num="${BASH_REMATCH[2]}"
                local column="${BASH_REMATCH[3]}"
                local severity="${BASH_REMATCH[4]}"
                local code="${BASH_REMATCH[5]}"
                local message="${BASH_REMATCH[6]}"
                
                # Áõ∏ÂØæ„Éë„Çπ„Å´Â§âÊèõ
                local rel_path="${file#$PROJECT_ROOT/}"
                
                # ÈáçË¶ÅÂ∫¶Âà§ÂÆö
                local priority=$PRIORITY_MEDIUM
                case "$code" in
                    TS2322|TS2339|TS2345) priority=$PRIORITY_HIGH ;;     # Type assignment errors
                    TS2304|TS2307|TS2305) priority=$PRIORITY_CRITICAL ;; # Cannot find name/module
                    TS1005|TS1109|TS1128) priority=$PRIORITY_HIGH ;;     # Syntax errors
                    *) priority=$PRIORITY_MEDIUM ;;
                esac
                
                ts_errors+=("{\"file\":\"$rel_path\",\"line\":$line_num,\"column\":$column,\"severity\":\"$severity\",\"code\":\"$code\",\"message\":\"$message\",\"priority\":$priority}")
            fi
        done <<< "$ts_output"
    fi
    
    # ESLint ÂïèÈ°åÂàÜÊûê
    echo -e "${YELLOW}ESLint ÂïèÈ°åÂàÜÊûê‰∏≠...${NC}"
    if command -v npm >/dev/null 2>&1; then
        local eslint_output
        eslint_output=$(npm run lint 2>&1 || true)
        
        # ESLint Âá∫Âäõ„Çí„Éë„Éº„Çπ
        while IFS= read -r line; do
            if [[ "$line" =~ ^(.+):([0-9]+):([0-9]+):[[:space:]]*(error|warning)[[:space:]]+(.+)$ ]]; then
                local file="${BASH_REMATCH[1]}"
                local line_num="${BASH_REMATCH[2]}"
                local column="${BASH_REMATCH[3]}"
                local severity="${BASH_REMATCH[4]}"
                local message="${BASH_REMATCH[5]}"
                
                local rel_path="${file#$PROJECT_ROOT/}"
                
                # ÈáçË¶ÅÂ∫¶Âà§ÂÆö
                local priority=$PRIORITY_MEDIUM
                if [[ "$severity" == "error" ]]; then
                    priority=$PRIORITY_HIGH
                else
                    priority=$PRIORITY_LOW
                fi
                
                eslint_issues+=("{\"file\":\"$rel_path\",\"line\":$line_num,\"column\":$column,\"severity\":\"$severity\",\"message\":\"$message\",\"priority\":$priority}")
            fi
        done <<< "$eslint_output"
    fi
    
    # ÂïèÈ°å„Çµ„Éû„É™„Éº‰ΩúÊàê
    local total_issues=$((${#ts_errors[@]} + ${#eslint_issues[@]}))
    local critical_count=$(printf '%s\n' "${ts_errors[@]}" "${eslint_issues[@]}" | grep -c "\"priority\":$PRIORITY_CRITICAL" || echo "0")
    local high_count=$(printf '%s\n' "${ts_errors[@]}" "${eslint_issues[@]}" | grep -c "\"priority\":$PRIORITY_HIGH" || echo "0")
    local medium_count=$(printf '%s\n' "${ts_errors[@]}" "${eslint_issues[@]}" | grep -c "\"priority\":$PRIORITY_MEDIUM" || echo "0")
    local low_count=$(printf '%s\n' "${ts_errors[@]}" "${eslint_issues[@]}" | grep -c "\"priority\":$PRIORITY_LOW" || echo "0")
    
    # JSON‰øùÂ≠ò
    cat > "$issues_file" << EOF
{
  "analysis_timestamp": "$(date -Iseconds)",
  "summary": {
    "total_issues": $total_issues,
    "typescript_errors": ${#ts_errors[@]},
    "eslint_issues": ${#eslint_issues[@]},
    "priority_breakdown": {
      "critical": $critical_count,
      "high": $high_count,
      "medium": $medium_count,
      "low": $low_count
    }
  },
  "typescript_errors": [
    $(IFS=','; echo "${ts_errors[*]}")
  ],
  "eslint_issues": [
    $(IFS=','; echo "${eslint_issues[*]}")
  ]
}
EOF
    
    echo -e "${GREEN}‚úÖ ÂìÅË≥™ÂïèÈ°åÂàÜÊûêÂÆå‰∫Ü${NC}"
    echo -e "${RED}üö® Critical: $critical_count${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è High: $high_count${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è Medium: $medium_count${NC}"
    echo -e "${GREEN}üìù Low: $low_count${NC}"
    echo ""
}

# =========================
# ‰æùÂ≠òÈñ¢‰øÇÂàÜÊûê
# =========================

analyze_dependencies() {
    echo -e "${BOLD}${CYAN}üì¶ ‰æùÂ≠òÈñ¢‰øÇÂàÜÊûêÈñãÂßã${NC}"
    
    local deps_file="$ANALYSIS_DIR/dependencies.json"
    local import_map=()
    local dependency_count=()
    
    # ÂêÑ„Éï„Ç°„Ç§„É´„ÅÆimportÊñá„ÇíÂàÜÊûê
    while IFS= read -r -d '' file; do
        local rel_path="${file#$PROJECT_ROOT/}"
        local imports=()
        
        # importÊñáÊäΩÂá∫
        while IFS= read -r line; do
            if [[ "$line" =~ ^[[:space:]]*import[[:space:]]+.*[[:space:]]from[[:space:]]+['\"](.+)['\"] ]]; then
                local import_path="${BASH_REMATCH[1]}"
                imports+=("\"$import_path\"")
            fi
        done < "$file"
        
        if [[ ${#imports[@]} -gt 0 ]]; then
            import_map+=("{\"file\":\"$rel_path\",\"imports\":[$(IFS=','; echo "${imports[*]}")],\"import_count\":${#imports[@]}}")
        fi
    done < <(find "$SRC_DIR" -name "*.ts" -o -name "*.tsx" -print0)
    
    # Âæ™Áí∞‰æùÂ≠ò„ÉÅ„Çß„ÉÉ„ÇØ
    echo -e "${YELLOW}Âæ™Áí∞‰æùÂ≠ò„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...${NC}"
    local circular_deps=()
    # Á∞°ÊòìÁöÑ„Å™Âæ™Áí∞‰æùÂ≠òÊ§úÂá∫ÔºàÂÆüÈöõ„Å´„ÅØ„Çà„ÇäË§áÈõë„Å™ÂÆüË£Ö„ÅåÂøÖË¶ÅÔºâ
    
    # Â§ñÈÉ®‰æùÂ≠òÈñ¢‰øÇÂàÜÊûê
    local external_deps=()
    if [[ -f "$PROJECT_ROOT/package.json" ]]; then
        external_deps=($(jq -r '.dependencies // {} | keys[]' "$PROJECT_ROOT/package.json" 2>/dev/null || echo ""))
    fi
    
    # JSON‰øùÂ≠ò
    cat > "$deps_file" << EOF
{
  "analysis_timestamp": "$(date -Iseconds)",
  "summary": {
    "total_files_analyzed": $(echo "${import_map[@]}" | wc -w),
    "external_dependencies": ${#external_deps[@]},
    "circular_dependencies": ${#circular_deps[@]}
  },
  "import_map": [
    $(IFS=','; echo "${import_map[*]}")
  ],
  "external_dependencies": [
    $(printf '"%s",' "${external_deps[@]}" | sed 's/,$//')
  ],
  "circular_dependencies": [
    $(IFS=','; echo "${circular_deps[*]}")
  ]
}
EOF
    
    echo -e "${GREEN}‚úÖ ‰æùÂ≠òÈñ¢‰øÇÂàÜÊûêÂÆå‰∫Ü${NC}"
    echo -e "${BLUE}üì¶ Â§ñÈÉ®‰æùÂ≠ò: ${#external_deps[@]}${NC}"
    echo -e "${PURPLE}üîÑ Âæ™Áí∞‰æùÂ≠ò: ${#circular_deps[@]}${NC}"
    echo ""
}

# =========================
# „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂàÜÊûê
# =========================

analyze_performance_issues() {
    echo -e "${BOLD}${GREEN}‚ö° „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂïèÈ°åÂàÜÊûêÈñãÂßã${NC}"
    
    local perf_file="$ANALYSIS_DIR/performance.json"
    local large_files=()
    local complex_components=()
    local potential_issues=()
    
    # Â§ß„Åç„Å™„Éï„Ç°„Ç§„É´„ÅÆÊ§úÂá∫
    while IFS= read -r -d '' file; do
        local rel_path="${file#$PROJECT_ROOT/}"
        local lines=$(wc -l < "$file" 2>/dev/null || echo "0")
        local size=$(wc -c < "$file" 2>/dev/null || echo "0")
        
        # „Çµ„Ç§„Ç∫ÈñæÂÄ§„ÉÅ„Çß„ÉÉ„ÇØ
        if [[ $lines -gt 300 ]] || [[ $size -gt 15000 ]]; then
            large_files+=("{\"file\":\"$rel_path\",\"lines\":$lines,\"size\":$size,\"severity\":\"high\"}")
        elif [[ $lines -gt 200 ]] || [[ $size -gt 10000 ]]; then
            large_files+=("{\"file\":\"$rel_path\",\"lines\":$lines,\"size\":$size,\"severity\":\"medium\"}")
        fi
        
        # React „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆË§áÈõëÂ∫¶„ÉÅ„Çß„ÉÉ„ÇØ
        if [[ "$file" == *.tsx ]] && [[ "$rel_path" == *components* ]]; then
            local hooks_count=$(grep -c "use[A-Z]" "$file" 2>/dev/null || echo "0")
            local jsx_elements=$(grep -c "<[A-Za-z]" "$file" 2>/dev/null || echo "0")
            
            if [[ $hooks_count -gt 5 ]] || [[ $jsx_elements -gt 20 ]]; then
                complex_components+=("{\"file\":\"$rel_path\",\"hooks\":$hooks_count,\"jsx_elements\":$jsx_elements,\"complexity\":\"high\"}")
            fi
        fi
        
        # „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂïèÈ°å„Éë„Çø„Éº„É≥Ê§úÂá∫
        if grep -q "new Date()" "$file" 2>/dev/null; then
            potential_issues+=("{\"file\":\"$rel_path\",\"issue\":\"frequent_date_creation\",\"description\":\"Frequent Date object creation detected\"}")
        fi
        
        if grep -q "JSON.parse\|JSON.stringify" "$file" 2>/dev/null; then
            local json_count=$(grep -c "JSON\." "$file" 2>/dev/null || echo "0")
            if [[ $json_count -gt 3 ]]; then
                potential_issues+=("{\"file\":\"$rel_path\",\"issue\":\"frequent_json_ops\",\"description\":\"Frequent JSON operations detected\"}")
            fi
        fi
    done < <(find "$SRC_DIR" -name "*.ts" -o -name "*.tsx" -print0)
    
    # „Éê„É≥„Éâ„É´„Çµ„Ç§„Ç∫‰∫àÊ∏¨
    local total_size=0
    while IFS= read -r -d '' file; do
        local size=$(wc -c < "$file" 2>/dev/null || echo "0")
        total_size=$((total_size + size))
    done < <(find "$SRC_DIR" -name "*.ts" -o -name "*.tsx" -print0)
    
    # JSON‰øùÂ≠ò
    cat > "$perf_file" << EOF
{
  "analysis_timestamp": "$(date -Iseconds)",
  "summary": {
    "large_files": ${#large_files[@]},
    "complex_components": ${#complex_components[@]},
    "potential_issues": ${#potential_issues[@]},
    "total_source_size": $total_size,
    "estimated_bundle_size": $(( total_size * 60 / 100 ))
  },
  "large_files": [
    $(IFS=','; echo "${large_files[*]}")
  ],
  "complex_components": [
    $(IFS=','; echo "${complex_components[*]}")
  ],
  "potential_issues": [
    $(IFS=','; echo "${potential_issues[*]}")
  ]
}
EOF
    
    echo -e "${GREEN}‚úÖ „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂàÜÊûêÂÆå‰∫Ü${NC}"
    echo -e "${YELLOW}üìÑ Â§ß„Åç„Å™„Éï„Ç°„Ç§„É´: ${#large_files[@]}${NC}"
    echo -e "${PURPLE}üß© Ë§áÈõë„Å™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà: ${#complex_components[@]}${NC}"
    echo -e "${RED}‚ö†Ô∏è ÊΩúÂú®ÁöÑÂïèÈ°å: ${#potential_issues[@]}${NC}"
    echo ""
}

# =========================
# ‰øÆÂæ©Ë®àÁîªÁîüÊàê
# =========================

generate_repair_plan() {
    echo -e "${BOLD}${PURPLE}üìã ‰øÆÂæ©Ë®àÁîªÁîüÊàêÈñãÂßã${NC}"
    
    local plan_file="$ANALYSIS_DIR/repair-plan.json"
    local repair_tasks=()
    local task_id=1
    
    # ÂìÅË≥™ÂïèÈ°å„Åã„Çâ‰øÆÂæ©„Çø„Çπ„ÇØÁîüÊàê
    if [[ -f "$ANALYSIS_DIR/quality-issues.json" ]]; then
        local critical_files=($(jq -r '.typescript_errors[] | select(.priority == 1) | .file' "$ANALYSIS_DIR/quality-issues.json" 2>/dev/null | sort -u))
        local high_files=($(jq -r '.typescript_errors[] | select(.priority == 2) | .file' "$ANALYSIS_DIR/quality-issues.json" 2>/dev/null | sort -u))
        
        # Critical issues
        for file in "${critical_files[@]}"; do
            repair_tasks+=("{\"id\":$task_id,\"priority\":1,\"type\":\"critical_fix\",\"file\":\"$file\",\"description\":\"Fix critical TypeScript errors\",\"estimated_time\":\"30min\",\"feature\":\"auto-detect\"}")
            ((task_id++))
        done
        
        # High priority issues
        for file in "${high_files[@]}"; do
            repair_tasks+=("{\"id\":$task_id,\"priority\":2,\"type\":\"high_fix\",\"file\":\"$file\",\"description\":\"Fix high priority TypeScript errors\",\"estimated_time\":\"20min\",\"feature\":\"auto-detect\"}")
            ((task_id++))
        done
    fi
    
    # „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂïèÈ°å„Åã„Çâ‰øÆÂæ©„Çø„Çπ„ÇØÁîüÊàê
    if [[ -f "$ANALYSIS_DIR/performance.json" ]]; then
        local large_component_files=($(jq -r '.complex_components[] | .file' "$ANALYSIS_DIR/performance.json" 2>/dev/null))
        
        for file in "${large_component_files[@]}"; do
            repair_tasks+=("{\"id\":$task_id,\"priority\":3,\"type\":\"performance_optimization\",\"file\":\"$file\",\"description\":\"Optimize complex React component\",\"estimated_time\":\"45min\",\"feature\":\"Feature-B\"}")
            ((task_id++))
        done
    fi
    
    # FeatureÂà•„Çø„Çπ„ÇØÂàÜÈ°û
    local feature_b_tasks=()
    local feature_c_tasks=()
    local feature_d_tasks=()
    local feature_e_tasks=()
    
    for task in "${repair_tasks[@]}"; do
        local file=$(echo "$task" | jq -r '.file')
        case "$file" in
            *components/*|*pages/*) feature_b_tasks+=("$task") ;;
            *services/*|*types/*) feature_c_tasks+=("$task") ;;
            *powershell*|*backend*) feature_d_tasks+=("$task") ;;
            *) feature_e_tasks+=("$task") ;;
        esac
    done
    
    # ‰øÆÂæ©Ë®àÁîª‰øùÂ≠ò
    cat > "$plan_file" << EOF
{
  "plan_timestamp": "$(date -Iseconds)",
  "summary": {
    "total_tasks": ${#repair_tasks[@]},
    "feature_b_tasks": ${#feature_b_tasks[@]},
    "feature_c_tasks": ${#feature_c_tasks[@]},
    "feature_d_tasks": ${#feature_d_tasks[@]},
    "feature_e_tasks": ${#feature_e_tasks[@]},
    "estimated_total_time": "$(( ${#repair_tasks[@]} * 25 ))min"
  },
  "tasks": [
    $(IFS=','; echo "${repair_tasks[*]}")
  ],
  "feature_breakdown": {
    "feature_b": [
      $(IFS=','; echo "${feature_b_tasks[*]}")
    ],
    "feature_c": [
      $(IFS=','; echo "${feature_c_tasks[*]}")
    ],
    "feature_d": [
      $(IFS=','; echo "${feature_d_tasks[*]}")
    ],
    "feature_e": [
      $(IFS=','; echo "${feature_e_tasks[*]}")
    ]
  }
}
EOF
    
    echo -e "${GREEN}‚úÖ ‰øÆÂæ©Ë®àÁîªÁîüÊàêÂÆå‰∫Ü${NC}"
    echo -e "${BLUE}üìã Á∑è„Çø„Çπ„ÇØÊï∞: ${#repair_tasks[@]}${NC}"
    echo -e "${CYAN}‚è±Ô∏è ‰∫àÊÉ≥ÂÆüË°åÊôÇÈñì: $(( ${#repair_tasks[@]} * 25 ))ÂàÜ${NC}"
    echo ""
}

# =========================
# Áµ±Âêà„É¨„Éù„Éº„ÉàÁîüÊàê
# =========================

generate_comprehensive_report() {
    echo -e "${BOLD}${BLUE}üìä Áµ±Âêà„É¨„Éù„Éº„ÉàÁîüÊàêÈñãÂßã${NC}"
    
    # ÂêÑÂàÜÊûêÁµêÊûú„ÇíÁµ±Âêà
    local file_structure="{}"
    local quality_issues="{}"
    local dependencies="{}"
    local performance="{}"
    local repair_plan="{}"
    
    [[ -f "$ANALYSIS_DIR/file-structure.json" ]] && file_structure=$(cat "$ANALYSIS_DIR/file-structure.json")
    [[ -f "$ANALYSIS_DIR/quality-issues.json" ]] && quality_issues=$(cat "$ANALYSIS_DIR/quality-issues.json")
    [[ -f "$ANALYSIS_DIR/dependencies.json" ]] && dependencies=$(cat "$ANALYSIS_DIR/dependencies.json")
    [[ -f "$ANALYSIS_DIR/performance.json" ]] && performance=$(cat "$ANALYSIS_DIR/performance.json")
    [[ -f "$ANALYSIS_DIR/repair-plan.json" ]] && repair_plan=$(cat "$ANALYSIS_DIR/repair-plan.json")
    
    # Áµ±ÂêàJSON‰ΩúÊàê
    cat > "$ANALYSIS_REPORT" << EOF
{
  "analysis_metadata": {
    "version": "1.0",
    "timestamp": "$(date -Iseconds)",
    "project_root": "$PROJECT_ROOT",
    "analyzer": "WebUI Repair Analyzer"
  },
  "file_structure": $file_structure,
  "quality_issues": $quality_issues,
  "dependencies": $dependencies,
  "performance": $performance,
  "repair_plan": $repair_plan
}
EOF
    
    # MarkdownË©≥Á¥∞„É¨„Éù„Éº„ÉàÁîüÊàê
    generate_markdown_report
    
    echo -e "${GREEN}‚úÖ Áµ±Âêà„É¨„Éù„Éº„ÉàÁîüÊàêÂÆå‰∫Ü${NC}"
    echo -e "${BLUE}üìÑ JSON „É¨„Éù„Éº„Éà: $ANALYSIS_REPORT${NC}"
    echo -e "${BLUE}üìù Ë©≥Á¥∞„É¨„Éù„Éº„Éà: $DETAILED_REPORT${NC}"
}

# =========================
# Markdown„É¨„Éù„Éº„ÉàÁîüÊàê
# =========================

generate_markdown_report() {
    cat > "$DETAILED_REPORT" << 'EOF'
# WebUI‰øÆÂæ©ÂØæË±°Ë©≥Á¥∞ÂàÜÊûê„É¨„Éù„Éº„Éà

## üìã ÂàÜÊûê„Çµ„Éû„É™„Éº

„Åì„ÅÆÂàÜÊûê„É¨„Éù„Éº„Éà„ÅØ„ÄÅServiceGrid WebUI„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ‰øÆÂæ©ÂØæË±°„ÇíË©≥Á¥∞„Å´ÂàÜÊûê„Åó„ÄÅÂÑ™ÂÖàÂ∫¶‰ªò„Åç„ÅÆ‰øÆÂæ©Ë®àÁîª„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ

## üéØ ÂÆüË°åÊé®Â•®‰∫ãÈ†Ö

### 1. Âç≥Â∫ßÂØæÂøú„ÅåÂøÖË¶ÅÔºàCriticalÔºâ
- TypeScriptÈáçË¶Å„Ç®„É©„Éº„ÅÆ‰øÆÂæ©
- „Éì„É´„ÉâÈòªÂÆ≥Ë¶ÅÂõ†„ÅÆÈô§Âéª
- „Çª„Ç≠„É•„É™„ÉÜ„Ç£ËÑÜÂº±ÊÄß„ÅÆÂØæÂøú

### 2. È´òÂÑ™ÂÖàÂ∫¶ÂØæÂøúÔºàHighÔºâ
- ÂûãÂÆâÂÖ®ÊÄßÂïèÈ°å„ÅÆËß£Ê±∫
- ESLint„Ç®„É©„Éº„ÅÆ‰øÆÂæ©
- „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂïèÈ°å„ÅÆÊúÄÈÅ©Âåñ

### 3. ‰∏≠ÂÑ™ÂÖàÂ∫¶ÂØæÂøúÔºàMediumÔºâ
- „Ç≥„Éº„ÉâÂìÅË≥™Âêë‰∏ä
- „ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏ÊîπÂñÑ
- „Éâ„Ç≠„É•„É°„É≥„ÉàÊï¥ÂÇô

### 4. ‰ΩéÂÑ™ÂÖàÂ∫¶ÂØæÂøúÔºàLowÔºâ
- „Ç≥„Éº„Éâ„Çπ„Çø„Ç§„É´Áµ±‰∏Ä
- Ë≠¶Âëä„É°„ÉÉ„Çª„Éº„Ç∏Ëß£Ê∂à
- ÊúÄÈÅ©ÂåñÊèêÊ°à„ÅÆÂÆüË£Ö

## üìä FeatureÂà•‰øÆÂæ©„Ç¨„Ç§„Éâ„É©„Ç§„É≥

### Feature-B (UI/„ÉÜ„Çπ„Éà)
- React 19„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÊúÄÈÅ©Âåñ
- „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£ÊîπÂñÑ
- „ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏Âêë‰∏ä

### Feature-C (APIÈñãÁô∫)
- TypeScriptÂûãÂÆâÂÖ®ÊÄßÂº∑Âåñ
- API „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞ÊîπÂñÑ
- ÈùûÂêåÊúüÂá¶ÁêÜÊúÄÈÅ©Âåñ

### Feature-D (PowerShellÁµ±Âêà)
- WindowsÁµ±ÂêàÊ©üËÉΩÂº∑Âåñ
- „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆöÁ¢∫Ë™ç
- „Ç®„É©„Éº„É≠„Ç∞Ê©üËÉΩËøΩÂä†

### Feature-E (ÂìÅË≥™„Éª„Çª„Ç≠„É•„É™„ÉÜ„Ç£)
- ÂåÖÊã¨ÁöÑÂìÅË≥™Áõ£Êüª
- „Çª„Ç≠„É•„É™„ÉÜ„Ç£ËÑÜÂº±ÊÄß„Çπ„Ç≠„É£„É≥
- „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ

## üîß Ëá™Âãï‰øÆÂæ©„Ç∑„Çπ„ÉÜ„É†ÈÄ£Êê∫

„Åì„ÅÆÂàÜÊûêÁµêÊûú„ÅØ `auto-webui-fixer.sh` „Å®ÈÄ£Êê∫„Åó„ÄÅÂÑ™ÂÖàÂ∫¶„Å´Âü∫„Å•„ÅÑ„ÅüËá™Âãï‰øÆÂæ©„ÇíÂÆüË°å„Åß„Åç„Åæ„ÅôÔºö

```bash
# ÂàÜÊûêÁµêÊûú„Å´Âü∫„Å•„ÅèËá™Âãï‰øÆÂæ©ÂÆüË°å
./tmux/tools/auto-webui-fixer.sh

# ÁâπÂÆöFeature„ÅÆÈõÜ‰∏≠‰øÆÂæ©
./tmux/tools/feature-commands.sh feature-b-ui
./tmux/tools/feature-commands.sh feature-c-api
```

## üìà ÊúüÂæÖ„Åï„Çå„ÇãÊîπÂñÑÂäπÊûú

1. **ÂìÅË≥™Âêë‰∏ä**: TypeScript„Ç®„É©„Éº0„ÄÅESLint„Ç®„É©„Éº0„ÇíÈÅîÊàê
2. **„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ**: „Éê„É≥„Éâ„É´„Çµ„Ç§„Ç∫20%ÂâäÊ∏õ„ÄÅÂàùÊúü„É≠„Éº„ÉâÊôÇÈñì30%Áü≠Á∏Æ
3. **‰øùÂÆàÊÄß**: „Ç≥„Éº„ÉâË§áÈõëÂ∫¶ÂâäÊ∏õ„ÄÅ„ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏85%‰ª•‰∏ä
4. **„Çª„Ç≠„É•„É™„ÉÜ„Ç£**: ËÑÜÂº±ÊÄß0„ÄÅOWASPÂü∫Ê∫ñ100%Ê∫ñÊã†

---

*„Åì„ÅÆ„É¨„Éù„Éº„Éà„ÅØ WebUI‰øÆÂæ©ÂØæË±°Ë©≥Á¥∞ÂàÜÊûê„Ç∑„Çπ„ÉÜ„É† v1.0 „Å´„Çà„ÇäËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü„ÄÇ*
EOF
    
    echo -e "${PURPLE}üìù Markdown„É¨„Éù„Éº„ÉàÁîüÊàêÂÆå‰∫Ü${NC}"
}

# =========================
# „Éò„É´„ÉóË°®Á§∫
# =========================

show_help() {
    echo -e "${BOLD}${BLUE}WebUI‰øÆÂæ©ÂØæË±°Ë©≥Á¥∞ÂàÜÊûê„Ç∑„Çπ„ÉÜ„É† v1.0${NC}"
    echo ""
    echo -e "${YELLOW}‰ΩøÁî®ÊñπÊ≥ï:${NC}"
    echo "  $0 [„Ç≥„Éû„É≥„Éâ]"
    echo ""
    echo -e "${YELLOW}„Ç≥„Éû„É≥„Éâ:${NC}"
    echo "  analyze                        - ÂÆåÂÖ®ÂàÜÊûêÂÆüË°å"
    echo "  structure                      - „Éï„Ç°„Ç§„É´ÊßãÈÄ†ÂàÜÊûê„ÅÆ„Åø"
    echo "  quality                        - ÂìÅË≥™ÂïèÈ°åÂàÜÊûê„ÅÆ„Åø"
    echo "  dependencies                   - ‰æùÂ≠òÈñ¢‰øÇÂàÜÊûê„ÅÆ„Åø"
    echo "  performance                    - „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂàÜÊûê„ÅÆ„Åø"
    echo "  plan                           - ‰øÆÂæ©Ë®àÁîªÁîüÊàê„ÅÆ„Åø"
    echo "  report                         - „É¨„Éù„Éº„ÉàÁîüÊàê„ÅÆ„Åø"
    echo "  help                           - „Éò„É´„ÉóË°®Á§∫"
    echo ""
    echo -e "${YELLOW}‰æã:${NC}"
    echo "  $0 analyze                     # ÂÆåÂÖ®ÂàÜÊûêÂÆüË°å"
    echo "  $0 quality                     # ÂìÅË≥™ÂïèÈ°å„ÅÆ„ÅøÂàÜÊûê"
    echo "  $0 report                      # „É¨„Éù„Éº„ÉàÁîüÊàê„ÅÆ„Åø"
}

# =========================
# „É°„Ç§„É≥ÂÆüË°åÈÉ®
# =========================

main() {
    case "${1:-analyze}" in
        "analyze"|"full")
            init_analysis
            analyze_file_structure
            analyze_quality_issues
            analyze_dependencies
            analyze_performance_issues
            generate_repair_plan
            generate_comprehensive_report
            ;;
        "structure")
            init_analysis
            analyze_file_structure
            ;;
        "quality")
            init_analysis
            analyze_quality_issues
            ;;
        "dependencies"|"deps")
            init_analysis
            analyze_dependencies
            ;;
        "performance"|"perf")
            init_analysis
            analyze_performance_issues
            ;;
        "plan")
            init_analysis
            generate_repair_plan
            ;;
        "report")
            generate_comprehensive_report
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå ‰∏çÊòé„Å™„Ç≥„Éû„É≥„Éâ: $1${NC}"
            show_help
            exit 1
            ;;
    esac
}

# „Çπ„ÇØ„É™„Éó„Éà„ÅåÁõ¥Êé•ÂÆüË°å„Åï„Çå„ÅüÂ†¥Âêà
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
EOF