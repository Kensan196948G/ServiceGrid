#!/bin/bash

# Feature-C: APIÈñãÁô∫
# Node.js„ÉªExpress„Éª„ÉÜ„Çπ„ÉàÈÄöÈÅé„É´„Éº„Éó

set -e

PROJECT_ROOT="/mnt/e/ServiceGrid"
FEATURE_NAME="Feature-C: APIÈñãÁô∫"
BACKEND_DIR="$PROJECT_ROOT/backend"

# Claude CodeËá™ÂãïËµ∑ÂãïË®≠ÂÆö
setup_claude() {
    echo "ü§ñ Claude CodeËá™ÂãïËµ∑Âãï‰∏≠..."
    
    # .env„Åã„ÇâAPI„Ç≠„ÉºË™≠„ÅøËæº„Åø
    if [ -f "$PROJECT_ROOT/.env" ]; then
        export $(grep -v '^#' "$PROJECT_ROOT/.env" | xargs)
    fi
    
    # „Éó„É≠„É≥„Éó„ÉàË®≠ÂÆö
    export PS1='[Feature-C-API] \w$ '
    echo "\033]0;Feature-C-API\007"
    
    # Claude CodeÁí∞Â¢ÉÁ¢∫Ë™ç
    if command -v claude &> /dev/null; then
        echo "‚úÖ Claude Code„ÅåÂà©Áî®ÂèØËÉΩ„Åß„Åô"
        echo "üîß Feature-C-API: „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâAPIÈñãÁô∫„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Å®„Åó„Å¶Âãï‰Ωú‰∏≠"
        echo ""
        echo "üí° ‰ΩøÁî®‰æã:"
        echo "  claude 'API„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ'"
        echo "  claude '„Éá„Éº„Çø„Éô„Éº„Çπ„Çπ„Ç≠„Éº„Éû„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ'"
        echo "  claude '„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Å¶„Ç®„É©„Éº„Çí‰øÆÊ≠£„Åó„Å¶„Åè„Å†„Åï„ÅÑ'"
        echo ""
    else
        echo "‚ö†Ô∏è Claude Code„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        echo "üí° „Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï: pip install claude-code"
    fi
}

# Ëâ≤‰ªò„Åç„É°„ÉÉ„Çª„Éº„Ç∏Èñ¢Êï∞
print_header() {
    echo -e "\033[1;33m========================================\033[0m"
    echo -e "\033[1;33m  $FEATURE_NAME\033[0m"
    echo -e "\033[1;33m========================================\033[0m"
}

print_info() {
    echo -e "\033[1;34m[INFO]\033[0m $1"
}

print_success() {
    echo -e "\033[1;32m[SUCCESS]\033[0m $1"
}

print_error() {
    echo -e "\033[1;31m[ERROR]\033[0m $1"
}

print_warning() {
    echo -e "\033[1;33m[WARNING]\033[0m $1"
}

# APIÈñãÁô∫„É°„Éã„É•„ÉºË°®Á§∫
show_api_menu() {
    echo ""
    echo "üöÄ APIÈñãÁô∫„ÉÜ„Çπ„Éà„É´„Éº„Éó - Êìç‰Ωú„É°„Éã„É•„Éº"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo "1) üî• „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâAPI„Çµ„Éº„Éê„ÉºËµ∑Âãï"
    echo "2) üß™ APIÁµ±Âêà„ÉÜ„Çπ„ÉàÂÆüË°å"
    echo "3) üîÑ „ÉÜ„Çπ„ÉàÈÄöÈÅé„Åæ„ÅßËá™Âãï„É´„Éº„Éó"
    echo "4) üìä API‰ªïÊßòÁ¢∫Ë™ç„ÉªÊ§úË®º"
    echo "5) üóÑÔ∏è  „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ"
    echo "6) üîå API „Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÁîüÊàê"
    echo "7) üõ†Ô∏è  API Ëá™Âãï‰øÆÂæ©"
    echo "8) üì° APIÊé•Á∂ö„ÉÜ„Çπ„Éà"
    echo "9) üìù API „Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê"
    echo "a) üéØ ÂÖ®Ëá™ÂãïÈñãÁô∫„É¢„Éº„Éâ"
    echo "0) üîÑ „É°„Éã„É•„ÉºÂÜçË°®Á§∫"
    echo "q) ÁµÇ‰∫Ü"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
}

# „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâAPI„Çµ„Éº„Éê„ÉºËµ∑Âãï
start_api_server() {
    print_info "„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâAPI„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï‰∏≠..."
    
    cd "$BACKEND_DIR"
    
    # Êó¢Â≠ò„Çµ„Éº„Éê„Éº„ÉÅ„Çß„ÉÉ„ÇØ
    if pgrep -f "node.*8082" > /dev/null; then
        print_warning "API„Çµ„Éº„Éê„Éº„ÅØÊó¢„Å´Á®ºÂÉç‰∏≠„Åß„Åô (Port 8082)"
        return
    fi
    
    # ‰æùÂ≠òÈñ¢‰øÇ„Ç§„É≥„Çπ„Éà„Éº„É´Á¢∫Ë™ç
    if [ ! -d "node_modules" ]; then
        print_info "‰æùÂ≠òÈñ¢‰øÇ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
        npm install
    fi
    
    # Áí∞Â¢ÉÂ§âÊï∞Á¢∫Ë™ç
    if [ ! -f "../.env" ]; then
        print_warning ".env„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        print_info "„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„ÅßËµ∑Âãï„Åó„Åæ„Åô"
    fi
    
    # API„Çµ„Éº„Éê„ÉºËµ∑Âãï
    print_info "Express API„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï‰∏≠... (Port 8082)"
    PORT=8082 node secure-server.js &
    
    # Ëµ∑ÂãïÁ¢∫Ë™ç
    sleep 3
    if pgrep -f "node.*8082" > /dev/null; then
        print_success "API„Çµ„Éº„Éê„ÉºËµ∑ÂãïÂÆå‰∫Ü: http://localhost:8082"
        
        # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        if command -v curl &> /dev/null; then
            sleep 2
            if curl -s http://localhost:8082/api/health > /dev/null 2>&1; then
                print_success "API „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ: Ê≠£Â∏∏"
            fi
        fi
    else
        print_error "API„Çµ„Éº„Éê„ÉºËµ∑Âãï„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
    fi
}

# APIÁµ±Âêà„ÉÜ„Çπ„ÉàÂÆüË°å
run_api_tests() {
    print_info "APIÁµ±Âêà„ÉÜ„Çπ„Éà„ÇíÂÆüË°å‰∏≠..."
    
    cd "$BACKEND_DIR"
    
    # API„Çµ„Éº„Éê„ÉºÁ®ºÂÉçÁ¢∫Ë™ç
    if ! pgrep -f "node.*8082" > /dev/null; then
        print_warning "API„Çµ„Éº„Éê„Éº„ÅåËµ∑Âãï„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì"
        print_info "API„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï„Åó„Åæ„Åô„ÅãÔºü y/n"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            start_api_server
            sleep 3
        else
            return
        fi
    fi
    
    # „ÉÜ„Çπ„Éà„Éï„Ç°„Ç§„É´Â≠òÂú®Á¢∫Ë™ç
    local test_files_found=false
    
    if [ -f "package.json" ] && grep -q "test" package.json; then
        print_info "Node.js „ÉÜ„Çπ„Éà„Çπ„Ç§„Éº„ÉàÂÆüË°å‰∏≠..."
        if npm test; then
            print_success "Node.js „ÉÜ„Çπ„Éà: ÂêàÊ†º"
            test_files_found=true
        else
            print_error "Node.js „ÉÜ„Çπ„Éà: Â§±Êïó"
        fi
    fi
    
    # ÊâãÂãïAPI„ÉÜ„Çπ„ÉàÂÆüË°å
    if [ -f "test-api.js" ]; then
        print_info "APIÁµ±Âêà„ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠..."
        if node test-api.js; then
            print_success "APIÁµ±Âêà„ÉÜ„Çπ„Éà: ÂêàÊ†º"
            test_files_found=true
        else
            print_error "APIÁµ±Âêà„ÉÜ„Çπ„Éà: Â§±Êïó"
        fi
    fi
    
    # Ë™çË®º„ÉÜ„Çπ„Éà
    if [ -f "test-login-direct.js" ]; then
        print_info "Ë™çË®º„ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠..."
        if node test-login-direct.js; then
            print_success "Ë™çË®º„ÉÜ„Çπ„Éà: ÂêàÊ†º"
            test_files_found=true
        else
            print_error "Ë™çË®º„ÉÜ„Çπ„Éà: Â§±Êïó"
        fi
    fi
    
    if [ "$test_files_found" = false ]; then
        print_warning "„ÉÜ„Çπ„Éà„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        print_info "Âü∫Êú¨ÁöÑ„Å™API„ÉÜ„Çπ„Éà„ÇíÁîüÊàê„Åó„Åæ„Åô„ÅãÔºü y/n"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            generate_basic_api_tests
        fi
    fi
}

# „ÉÜ„Çπ„ÉàÈÄöÈÅé„Åæ„ÅßËá™Âãï„É´„Éº„Éó
run_test_loop() {
    print_info "„ÉÜ„Çπ„ÉàÈÄöÈÅé„Åæ„ÅßËá™Âãï„É´„Éº„Éó„ÇíÈñãÂßã„Åó„Åæ„Åô..."
    
    local max_attempts=5
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        print_info "„É´„Éº„ÉóË©¶Ë°å $attempt/$max_attempts"
        
        # API „Çµ„Éº„Éê„ÉºÁ¢∫Ë™ç
        if ! pgrep -f "node.*8082" > /dev/null; then
            print_info "API„Çµ„Éº„Éê„ÉºÂÜçËµ∑Âãï‰∏≠..."
            start_api_server
            sleep 3
        fi
        
        # „ÉÜ„Çπ„ÉàÂÆüË°å
        if run_api_tests_silent; then
            print_success "„ÉÜ„Çπ„Éà„É´„Éº„ÉóÂÆå‰∫Ü: ÂÖ®„ÉÜ„Çπ„ÉàÂêàÊ†º"
            return 0
        else
            print_warning "„ÉÜ„Çπ„ÉàÂ§±Êïó - Ëá™Âãï‰øÆÂæ©„ÇíË©¶Ë°å‰∏≠..."
            auto_fix_api_issues
            sleep 2
        fi
        
        ((attempt++))
    done
    
    print_error "ÊúÄÂ§ßË©¶Ë°åÂõûÊï∞„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇÊâãÂãïÁ¢∫Ë™ç„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ"
}

# „Çµ„Ç§„É¨„É≥„Éà„ÉÜ„Çπ„ÉàÂÆüË°å
run_api_tests_silent() {
    cd "$BACKEND_DIR"
    
    # Âü∫Êú¨ÁöÑ„Å™API„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÉÜ„Çπ„Éà
    if command -v curl &> /dev/null; then
        # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        if ! curl -s http://localhost:8082/api/health > /dev/null 2>&1; then
            return 1
        fi
        
        # Ë™çË®º„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
        if ! curl -s -X POST http://localhost:8082/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"admin","password":"admin123"}' > /dev/null 2>&1; then
            return 1
        fi
        
        return 0
    fi
    
    return 1
}

# API‰ªïÊßòÁ¢∫Ë™ç„ÉªÊ§úË®º
verify_api_specs() {
    print_info "API‰ªïÊßò„ÇíÁ¢∫Ë™ç„ÉªÊ§úË®º‰∏≠..."
    
    cd "$BACKEND_DIR"
    
    echo ""
    echo "üìã ÂÆüË£ÖÊ∏à„ÅøAPI„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà:"
    
    # Node.js API „Éï„Ç°„Ç§„É´Á¢∫Ë™ç
    if [ -d "api" ]; then
        print_info "Node.js APIs:"
        find api -name '*.js' | while read -r api_file; do
            local api_name=$(basename "$api_file" .js)
            echo "  ‚úÖ $api_name.js"
            
            # „Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÊäΩÂá∫ÔºàÁ∞°ÊòìÁâàÔºâ
            if grep -q "router\.get\|router\.post\|router\.put\|router\.delete" "$api_file"; then
                echo "    $(grep -o "router\.[a-z]*('.*'" "$api_file" | sed "s/router\./    - /g" | sed "s/'//g" || true)"
            fi
        done
        
        echo ""
        print_info "PowerShell APIs:"
        find api -name '*.ps1' | while read -r ps_file; do
            local ps_name=$(basename "$ps_file" .ps1)
            echo "  üî∑ $ps_name.ps1"
        done
    fi
    
    echo ""
    echo "üóÑÔ∏è „Éá„Éº„Çø„Éô„Éº„Çπ„Çπ„Ç≠„Éº„Éû:"
    if [ -d "db" ]; then
        find db -name '*.sql' | while read -r schema_file; do
            local schema_name=$(basename "$schema_file")
            echo "  üìÑ $schema_name"
        done
    fi
    
    # APIÁ®ºÂÉçÁä∂Ê≥ÅÁ¢∫Ë™ç
    echo ""
    print_info "APIÁ®ºÂÉçÁä∂Ê≥ÅÁ¢∫Ë™ç‰∏≠..."
    if pgrep -f "node.*8082" > /dev/null; then
        print_success "API„Çµ„Éº„Éê„Éº: Á®ºÂÉç‰∏≠ (Port 8082)"
        
        if command -v curl &> /dev/null; then
            # Âü∫Êú¨„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÉÜ„Çπ„Éà
            echo "  „Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÉÜ„Çπ„Éà:"
            
            # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
            if curl -s http://localhost:8082/api/health > /dev/null 2>&1; then
                echo "    ‚úÖ /api/health"
            else
                echo "    ‚ùå /api/health"
            fi
            
            # Ë™çË®º
            if curl -s http://localhost:8082/api/auth/login > /dev/null 2>&1; then
                echo "    ‚úÖ /api/auth/login"
            else
                echo "    ‚ùå /api/auth/login"
            fi
            
            # Ë≥áÁî£ÁÆ°ÁêÜ
            if curl -s http://localhost:8082/api/assets > /dev/null 2>&1; then
                echo "    ‚úÖ /api/assets"
            else
                echo "    ‚ùå /api/assets"
            fi
            
            # „Ç§„É≥„Ç∑„Éá„É≥„Éà
            if curl -s http://localhost:8082/api/incidents > /dev/null 2>&1; then
                echo "    ‚úÖ /api/incidents"
            else
                echo "    ‚ùå /api/incidents"
            fi
        fi
    else
        print_warning "API„Çµ„Éº„Éê„Éº: ÂÅúÊ≠¢‰∏≠"
    fi
}

# „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ
init_database() {
    print_info "„Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÂàùÊúüÂåñ‰∏≠..."
    
    cd "$BACKEND_DIR"
    
    # „Çπ„ÇØ„É™„Éó„ÉàÂ≠òÂú®Á¢∫Ë™ç
    local init_scripts=()
    
    if [ -f "scripts/init-database.js" ]; then
        init_scripts+=("scripts/init-database.js")
    fi
    
    if [ -f "scripts/init-assets-db.js" ]; then
        init_scripts+=("scripts/init-assets-db.js")
    fi
    
    if [ -f "scripts/init-incidents-db.js" ]; then
        init_scripts+=("scripts/init-incidents-db.js")
    fi
    
    if [ ${#init_scripts[@]} -eq 0 ]; then
        print_warning "„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ„Çπ„ÇØ„É™„Éó„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        return
    fi
    
    # ÂàùÊúüÂåñÂÆüË°å
    for script in "${init_scripts[@]}"; do
        print_info "ÂÆüË°å‰∏≠: $script"
        if node "$script"; then
            print_success "ÂÆå‰∫Ü: $script"
        else
            print_error "Â§±Êïó: $script"
        fi
    done
    
    # „Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´Á¢∫Ë™ç
    if [ -f "db/itsm.sqlite" ]; then
        print_success "„Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´Á¢∫Ë™çÂÆå‰∫Ü: db/itsm.sqlite"
        local db_size=$(stat -c%s "db/itsm.sqlite" 2>/dev/null || echo "unknown")
        print_info "„Éá„Éº„Çø„Éô„Éº„Çπ„Çµ„Ç§„Ç∫: $db_size bytes"
    fi
}

# API „Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÁîüÊàê
generate_api_endpoints() {
    print_info "API„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÇíÁîüÊàê‰∏≠..."
    
    cd "$BACKEND_DIR"
    
    # ‰∏çË∂≥„Åó„Å¶„ÅÑ„ÇãAPIÁ¢∫Ë™ç
    local missing_apis=()
    
    # Âü∫Êú¨ÁöÑ„Å™CRUD API„É™„Çπ„Éà
    local required_apis=(
        "users" "service-requests" "knowledge" 
        "problems" "releases" "changes" 
        "slas" "compliance" "security"
    )
    
    for api in "${required_apis[@]}"; do
        if [ ! -f "api/${api}.js" ]; then
            missing_apis+=("$api")
        fi
    done
    
    if [ ${#missing_apis[@]} -eq 0 ]; then
        print_success "ÂÖ®„Å¶„ÅÆÂü∫Êú¨API„ÅåÂÆüË£ÖÊ∏à„Åø„Åß„Åô"
        return
    fi
    
    print_info "‰∏çË∂≥„Åó„Å¶„ÅÑ„ÇãAPI: ${missing_apis[*]}"
    print_info "Âü∫Êú¨ÁöÑ„Å™API„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÁîüÊàê„Åó„Åæ„Åô„ÅãÔºü y/n"
    read -r response
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        for api in "${missing_apis[@]}"; do
            generate_basic_api_template "$api"
        done
    fi
}

# Âü∫Êú¨API„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàê
generate_basic_api_template() {
    local api_name="$1"
    local api_file="api/${api_name}.js"
    
    print_info "API„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàê‰∏≠: $api_name"
    
    cat > "$api_file" << EOF
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const auth = require('../middleware/auth');

const router = express.Router();
const dbPath = path.join(__dirname, '../db/itsm.sqlite');

// GET /${api_name} - ‰∏ÄË¶ßÂèñÂæó
router.get('/', auth, (req, res) => {
    const db = new sqlite3.Database(dbPath);
    
    db.all(\`SELECT * FROM ${api_name} ORDER BY created_at DESC\`, (err, rows) => {
        if (err) {
            console.error('${api_name} fetch error:', err);
            return res.status(500).json({ error: 'Internal server error' });
        }
        
        res.json(rows);
    });
    
    db.close();
});

// GET /${api_name}/:id - Ë©≥Á¥∞ÂèñÂæó
router.get('/:id', auth, (req, res) => {
    const { id } = req.params;
    const db = new sqlite3.Database(dbPath);
    
    db.get(\`SELECT * FROM ${api_name} WHERE id = ?\`, [id], (err, row) => {
        if (err) {
            console.error('${api_name} fetch error:', err);
            return res.status(500).json({ error: 'Internal server error' });
        }
        
        if (!row) {
            return res.status(404).json({ error: '${api_name} not found' });
        }
        
        res.json(row);
    });
    
    db.close();
});

// POST /${api_name} - Êñ∞Ë¶è‰ΩúÊàê
router.post('/', auth, (req, res) => {
    const data = req.body;
    const db = new sqlite3.Database(dbPath);
    
    // TODO: „Éá„Éº„Çø„Éê„É™„Éá„Éº„Ç∑„Éß„É≥ÂÆüË£Ö
    
    const stmt = db.prepare(\`INSERT INTO ${api_name} (title, description, created_at) VALUES (?, ?, datetime('now'))\`);
    
    stmt.run([data.title, data.description], function(err) {
        if (err) {
            console.error('${api_name} create error:', err);
            return res.status(500).json({ error: 'Internal server error' });
        }
        
        res.status(201).json({ id: this.lastID, message: '${api_name} created successfully' });
    });
    
    stmt.finalize();
    db.close();
});

// PUT /${api_name}/:id - Êõ¥Êñ∞
router.put('/:id', auth, (req, res) => {
    const { id } = req.params;
    const data = req.body;
    const db = new sqlite3.Database(dbPath);
    
    // TODO: „Éá„Éº„Çø„Éê„É™„Éá„Éº„Ç∑„Éß„É≥ÂÆüË£Ö
    
    db.run(\`UPDATE ${api_name} SET title = ?, description = ?, updated_at = datetime('now') WHERE id = ?\`,
        [data.title, data.description, id], function(err) {
        if (err) {
            console.error('${api_name} update error:', err);
            return res.status(500).json({ error: 'Internal server error' });
        }
        
        if (this.changes === 0) {
            return res.status(404).json({ error: '${api_name} not found' });
        }
        
        res.json({ message: '${api_name} updated successfully' });
    });
    
    db.close();
});

// DELETE /${api_name}/:id - ÂâäÈô§
router.delete('/:id', auth, (req, res) => {
    const { id } = req.params;
    const db = new sqlite3.Database(dbPath);
    
    db.run(\`DELETE FROM ${api_name} WHERE id = ?\`, [id], function(err) {
        if (err) {
            console.error('${api_name} delete error:', err);
            return res.status(500).json({ error: 'Internal server error' });
        }
        
        if (this.changes === 0) {
            return res.status(404).json({ error: '${api_name} not found' });
        }
        
        res.json({ message: '${api_name} deleted successfully' });
    });
    
    db.close();
});

module.exports = router;
EOF

    print_success "API„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàêÂÆå‰∫Ü: $api_file"
}

# API Ëá™Âãï‰øÆÂæ©
auto_fix_api_issues() {
    print_info "APIËá™Âãï‰øÆÂæ©„ÇíÂÆüË°å‰∏≠..."
    
    cd "$BACKEND_DIR"
    
    # „Çà„Åè„ÅÇ„Çã„Ç®„É©„Éº„Éë„Çø„Éº„É≥„ÅÆ‰øÆÂæ©
    
    # 1. „Éù„Éº„ÉàÁ´∂ÂêàËß£Ê±∫
    if lsof -ti:8082 &> /dev/null; then
        print_info "Port 8082 Á´∂ÂêàËß£Ê±∫‰∏≠..."
        pkill -f "node.*8082" 2>/dev/null || true
        sleep 2
    fi
    
    # 2. „Éá„Éº„Çø„Éô„Éº„Çπ„É≠„ÉÉ„ÇØËß£Ê±∫
    if [ -f "db/itsm.sqlite-wal" ]; then
        print_info "„Éá„Éº„Çø„Éô„Éº„Çπ„É≠„ÉÉ„ÇØËß£Ê±∫‰∏≠..."
        rm -f "db/itsm.sqlite-wal" "db/itsm.sqlite-shm" 2>/dev/null || true
    fi
    
    # 3. Node.js „É¢„Ç∏„É•„Éº„É´ÂÜç„Ç§„É≥„Çπ„Éà„Éº„É´
    if [ ! -d "node_modules" ] || [ ! -f "node_modules/.package-lock.json" ]; then
        print_info "Node.js‰æùÂ≠òÈñ¢‰øÇ‰øÆÂæ©‰∏≠..."
        npm install
    fi
    
    # 4. Âü∫Êú¨ÁöÑ„Å™Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Á¢∫Ë™ç
    if [ ! -f "package.json" ]; then
        print_error "package.json „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        return 1
    fi
    
    # 5. „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éü„Éâ„É´„Ç¶„Çß„Ç¢Á¢∫Ë™ç
    if [ ! -f "middleware/auth.js" ]; then
        print_warning "Ë™çË®º„Éü„Éâ„É´„Ç¶„Çß„Ç¢„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        # Âü∫Êú¨ÁöÑ„Å™Ë™çË®º„Éü„Éâ„É´„Ç¶„Çß„Ç¢ÁîüÊàê
        mkdir -p middleware
        cat > "middleware/auth.js" << 'EOF'
const jwt = require('jsonwebtoken');

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
        return res.status(401).json({ error: 'Access denied. No token provided.' });
    }
    
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret');
        req.user = decoded;
        next();
    } catch (ex) {
        res.status(400).json({ error: 'Invalid token.' });
    }
};

module.exports = auth;
EOF
        print_success "Âü∫Êú¨Ë™çË®º„Éü„Éâ„É´„Ç¶„Çß„Ç¢ÁîüÊàêÂÆå‰∫Ü"
    fi
    
    print_success "APIËá™Âãï‰øÆÂæ©ÂÆå‰∫Ü"
}

# APIÊé•Á∂ö„ÉÜ„Çπ„Éà
test_api_connections() {
    print_info "APIÊé•Á∂ö„ÉÜ„Çπ„Éà„ÇíÂÆüË°å‰∏≠..."
    
    if ! command -v curl &> /dev/null; then
        print_error "curl „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇAPIÊé•Á∂ö„ÉÜ„Çπ„Éà„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô„ÄÇ"
        return
    fi
    
    # API„Çµ„Éº„Éê„ÉºËµ∑ÂãïÁ¢∫Ë™ç
    if ! pgrep -f "node.*8082" > /dev/null; then
        print_warning "API„Çµ„Éº„Éê„Éº„ÅåËµ∑Âãï„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇËµ∑Âãï„Åó„Å¶„Åã„Çâ„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        return
    fi
    
    echo ""
    echo "üîå APIÊé•Á∂ö„ÉÜ„Çπ„ÉàÁµêÊûú:"
    
    # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
    if curl -s http://localhost:8082/api/health > /dev/null 2>&1; then
        echo "  ‚úÖ Health Check: OK"
    else
        echo "  ‚ùå Health Check: Failed"
    fi
    
    # Ë™çË®º„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
    local auth_response
    auth_response=$(curl -s -X POST http://localhost:8082/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"username":"admin","password":"admin123"}' 2>/dev/null)
    
    if echo "$auth_response" | grep -q "token" 2>/dev/null; then
        echo "  ‚úÖ Authentication: OK"
    else
        echo "  ‚ùå Authentication: Failed"
    fi
    
    # ‰∏ªË¶ÅAPI „Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
    local endpoints=("assets" "incidents" "service-requests")
    
    for endpoint in "${endpoints[@]}"; do
        if curl -s "http://localhost:8082/api/$endpoint" > /dev/null 2>&1; then
            echo "  ‚úÖ /$endpoint: OK"
        else
            echo "  ‚ùå /$endpoint: Failed"
        fi
    done
}

# API „Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê
generate_api_docs() {
    print_info "API„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÁîüÊàê‰∏≠..."
    
    cd "$BACKEND_DIR"
    
    local docs_file="../docs/API_Documentation.md"
    
    cat > "$docs_file" << EOF
# ITSM Platform API Documentation

## ÁîüÊàêÊó•ÊôÇ
$(date '+%YÂπ¥%mÊúà%dÊó• %H:%M:%S')

## Base URL
\`http://localhost:8082/api\`

## Ë™çË®º
Bearer TokenË™çË®º„Çí‰ΩøÁî®

### „É≠„Ç∞„Ç§„É≥
\`\`\`bash
curl -X POST http://localhost:8082/api/auth/login \\
  -H "Content-Type: application/json" \\
  -d '{"username":"admin","password":"admin123"}'
\`\`\`

## API„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà

EOF

    # ÂÆüË£ÖÊ∏à„ÅøAPI„ÅÆËá™Âãï„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê
    find api -name '*.js' | while read -r api_file; do
        local api_name=$(basename "$api_file" .js)
        echo "" >> "$docs_file"
        echo "### $api_name API" >> "$docs_file"
        echo "" >> "$docs_file"
        
        # „Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÊäΩÂá∫
        grep -n "router\.[a-z]*" "$api_file" | while read -r line; do
            echo "- $line" >> "$docs_file"
        done 2>/dev/null || true
    done
    
    print_success "API„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàêÂÆå‰∫Ü: $docs_file"
}

# ÂÖ®Ëá™ÂãïÈñãÁô∫„É¢„Éº„Éâ
run_full_auto_mode() {
    print_info "ÂÖ®Ëá™ÂãïÈñãÁô∫„É¢„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åô..."
    
    echo ""
    print_info "üîÑ Step 1: API„Çµ„Éº„Éê„ÉºËµ∑ÂãïÁ¢∫Ë™ç"
    if ! pgrep -f "node.*8082" > /dev/null; then
        start_api_server
    else
        print_success "API„Çµ„Éº„Éê„ÉºÁ®ºÂÉç‰∏≠"
    fi
    
    echo ""
    print_info "üîÑ Step 2: „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñÁ¢∫Ë™ç"
    if [ ! -f "db/itsm.sqlite" ] || [ ! -s "db/itsm.sqlite" ]; then
        init_database
    else
        print_success "„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñÊ∏à„Åø"
    fi
    
    echo ""
    print_info "üîÑ Step 3: ‰∏çË∂≥API„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÁîüÊàê"
    generate_api_endpoints
    
    echo ""
    print_info "üîÑ Step 4: APIËá™Âãï‰øÆÂæ©"
    auto_fix_api_issues
    
    echo ""
    print_info "üîÑ Step 5: APIÁµ±Âêà„ÉÜ„Çπ„Éà"
    run_api_tests
    
    echo ""
    print_info "üîÑ Step 6: APIÊé•Á∂ö„ÉÜ„Çπ„Éà"
    test_api_connections
    
    echo ""
    print_info "üîÑ Step 7: API„Éâ„Ç≠„É•„É°„É≥„ÉàÁîüÊàê"
    generate_api_docs
    
    echo ""
    print_success "ÂÖ®Ëá™ÂãïÈñãÁô∫„É¢„Éº„ÉâÂÆå‰∫Ü"
    print_info "Á∂ôÁ∂öÁõ£Ë¶ñ„ÇíÈñãÂßã„Åó„Åæ„Åô„ÅãÔºü y/n"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        continuous_api_monitoring
    fi
}

# Á∂ôÁ∂öAPIÁõ£Ë¶ñ
continuous_api_monitoring() {
    print_info "Á∂ôÁ∂öAPIÁõ£Ë¶ñ„É¢„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åô..."
    print_info "ÂÅúÊ≠¢„Åô„Çã„Å´„ÅØ Ctrl+C „ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    
    while true; do
        sleep 30
        
        # API„Çµ„Éº„Éê„ÉºÁ®ºÂÉçÁ¢∫Ë™ç
        if ! pgrep -f "node.*8082" > /dev/null; then
            print_warning "API„Çµ„Éº„Éê„Éº„ÉÄ„Ç¶„É≥Ê§úÂá∫ - ÂÜçËµ∑Âãï‰∏≠..."
            start_api_server
        fi
        
        # Âü∫Êú¨„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        if command -v curl &> /dev/null; then
            if ! curl -s http://localhost:8082/api/health > /dev/null 2>&1; then
                print_warning "API„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÂ§±Êïó - ‰øÆÂæ©‰∏≠..."
                auto_fix_api_issues
            fi
        fi
        
        # „Éï„Ç°„Ç§„É´Â§âÊõ¥Áõ£Ë¶ñÔºàÁ∞°ÊòìÁâàÔºâ
        local changed_files
        changed_files=$(find api -name '*.js' -newer /tmp/api_last_check 2>/dev/null | wc -l)
        
        if [ "$changed_files" -gt 0 ]; then
            print_info "API„Éï„Ç°„Ç§„É´Â§âÊõ¥„ÇíÊ§úÂá∫ ($changed_files „Éï„Ç°„Ç§„É´)"
            # Ëá™Âãï„ÉÜ„Çπ„ÉàÂÆüË°å
            run_api_tests_silent && print_success "Ëá™Âãï„ÉÜ„Çπ„Éà: OK" || print_warning "Ëá™Âãï„ÉÜ„Çπ„Éà: „Ç®„É©„ÉºÊ§úÂá∫"
        fi
        
        touch /tmp/api_last_check
    done
}

# Âü∫Êú¨API„ÉÜ„Çπ„ÉàÁîüÊàê
generate_basic_api_tests() {
    print_info "Âü∫Êú¨API„ÉÜ„Çπ„Éà„ÇíÁîüÊàê‰∏≠..."
    
    cat > "test-basic-api.js" << 'EOF'
const http = require('http');

const testEndpoint = (path, method = 'GET', data = null) => {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: 'localhost',
            port: 8082,
            path: `/api${path}`,
            method: method,
            headers: {
                'Content-Type': 'application/json',
            }
        };
        
        const req = http.request(options, (res) => {
            let body = '';
            res.on('data', (chunk) => {
                body += chunk;
            });
            res.on('end', () => {
                resolve({ status: res.statusCode, body: body });
            });
        });
        
        req.on('error', (err) => {
            reject(err);
        });
        
        if (data) {
            req.write(JSON.stringify(data));
        }
        req.end();
    });
};

const runBasicTests = async () => {
    console.log('Âü∫Êú¨API„ÉÜ„Çπ„ÉàÈñãÂßã...');
    
    try {
        // „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        const health = await testEndpoint('/health');
        console.log(`Health Check: ${health.status === 200 ? 'OK' : 'Failed'}`);
        
        // Ë™çË®º„ÉÜ„Çπ„Éà
        const auth = await testEndpoint('/auth/login', 'POST', {
            username: 'admin',
            password: 'admin123'
        });
        console.log(`Authentication: ${auth.status === 200 ? 'OK' : 'Failed'}`);
        
        // Âü∫Êú¨„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
        const endpoints = ['/assets', '/incidents'];
        for (const endpoint of endpoints) {
            try {
                const result = await testEndpoint(endpoint);
                console.log(`${endpoint}: ${result.status < 500 ? 'OK' : 'Failed'}`);
            } catch (err) {
                console.log(`${endpoint}: Failed`);
            }
        }
        
        console.log('Âü∫Êú¨API„ÉÜ„Çπ„ÉàÂÆå‰∫Ü');
        process.exit(0);
    } catch (err) {
        console.error('„ÉÜ„Çπ„Éà„Ç®„É©„Éº:', err.message);
        process.exit(1);
    }
};

runBasicTests();
EOF

    print_success "Âü∫Êú¨API„ÉÜ„Çπ„ÉàÁîüÊàêÂÆå‰∫Ü: test-basic-api.js"
}

# „É°„Ç§„É≥„É´„Éº„Éó
main_loop() {
    print_header
    
    while true; do
        show_api_menu
        echo -n "ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ: "
        read -r choice
        
        case $choice in
            1)
                start_api_server
                ;;
            2)
                run_api_tests
                ;;
            3)
                run_test_loop
                ;;
            4)
                verify_api_specs
                ;;
            5)
                init_database
                ;;
            6)
                generate_api_endpoints
                ;;
            7)
                auto_fix_api_issues
                ;;
            8)
                test_api_connections
                ;;
            9)
                generate_api_docs
                ;;
            a|A)
                run_full_auto_mode
                ;;
            0)
                clear
                print_header
                ;;
            q|Q)
                print_info "APIÈñãÁô∫„ÇíÁµÇ‰∫Ü„Åó„Åæ„Åô"
                exit 0
                ;;
            *)
                print_warning "ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇÂÜçÂ∫¶ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
                ;;
        esac
        
        echo ""
        echo "Press Enter to continue..."
        read -r
    done
}

# „Çπ„ÇØ„É™„Éó„ÉàÈñãÂßã
print_header
setup_claude
main_loop