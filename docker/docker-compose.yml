# Docker Compose設定
version: '3.8'

services:
  # バックエンドサービス
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: servicegrid-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8082
      - DB_PATH=/app/db/itsm.sqlite
      - JWT_SECRET=${JWT_SECRET:-default_jwt_secret_change_in_production}
      - JWT_EXPIRES_IN=24h
    volumes:
      - ./data/db:/app/db
      - ./data/logs:/app/logs
      - ./data/backup:/app/backup
    networks:
      - servicegrid-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # フロントエンドサービス
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: servicegrid-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - servicegrid-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M

  # Redis - キャッシュ用
  redis:
    image: redis:7-alpine
    container_name: servicegrid-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - servicegrid-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # システム監視用Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: servicegrid-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - servicegrid-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # 監視ダッシュボード用Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: servicegrid-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./docker/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./docker/dashboards:/var/lib/grafana/dashboards
    networks:
      - servicegrid-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

networks:
  servicegrid-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local